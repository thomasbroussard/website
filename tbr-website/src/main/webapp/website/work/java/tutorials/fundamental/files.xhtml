<html xmlns="http://www.w3.org/1999/xhtml">

<head>


    <!-- Basic Page Needs
  ================================================== -->
    <meta charset="utf-8"/>
    <title>(Not) Just Java</title>
    <meta name="description" content="Tutorial - Logger feature"/>
    <meta name="author" content="Thomas Broussard"/>

    <!-- Mobile Specific Metas
  ================================================== -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>

    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="shortcut icon" href="../../../../images/favicon.ico"/>
    <link href="../../../../stylesheets/doc-bs.css" rel="stylesheet"/>
    <link href="../../../../stylesheets/custom.css" rel="stylesheet"/>
    <title>(Not) Just Java</title>

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"/>

    <!-- Optional theme -->
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css"/>
    <link rel="stylesheet" type="text/css" href="../../../../stylesheets/github-rainbow.css"/>

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->


</head>
<body>
<!-- Main jumbotron for a primary marketing message or call to action -->
<!-- Docs page layout -->
<div class="bs-docs-header" id="content">
    <div class="container">
        <h1>Java Tutorials - Files and Java</h1>

        <p>How to handle data persistence into files using the Java Programming language? </p>

    </div>

</div>

<div class="container bs-docs-container">

<div class="row">
<div class="col-md-3">
    <div class="bs-docs-sidebar hidden-print" role="complementary">
        <ul class="nav bs-docs-sidenav">
            <li><a href="#intro">Introduction</a></li>
            <li><a href="#exercise">Exercise description</a></li>
            <li><a href="#dao">Designing a DAO </a></li>
            <li><a href="#write">Store an Identity</a></li>
            <li><a href="#read">Read all Identities</a></li>
            <li><a href="#usage">Example of usage</a></li>
            <li><a href="#src">Sources</a></li>
        </ul>
        <a class="back-to-top" href="#content">
            Back to top
        </a>
    </div>


</div>
<div class="col-md-9" role="main">
<ol class="breadcrumb">
    <li><a href="../../../../index.xhtml">Home</a></li>
    <li><a href="../../../index.xhtml">Work</a></li>
    <li><a href="../../index.xhtml">Java</a></li>
    <li><a href="../index.xhtml">Tutorials</a></li>
    <li class="active">Java - The Logger</li>
</ol>
<div class="bs-docs-section counter">

<h1 id="intro" class="page-header">Introduction</h1>

<p>This tutorial will show you how to handle the file usage in Java </p>

<p>The main goal of the exercise is to be able to read lists of objects from a file, previously filled
    it
    programmatically. The tutorial also shows how to manage a unique id in a file format </p>

<h1 id="exercise" class="page-header">Exercise description</h1>

<p>For the IAM software purpose, you need to persist Identities information, allowing you to save the
    user input</p>
<ul>
    <li><p>To provide a reusable logic, you will define a <strong>DAO</strong> interface and realize one
        implementation of that interface handling files accesses</p></li>
    <li><p>You will need to constitute a file where you'll put all the identity information </p></li>
    <li><p>You will need to access those information, being able to read all Identities information at
        once </p></li>

</ul>


<h1 class="page-header" id="dao">Defining a DAO</h1>

<p>What is a DAO? The DAO (for <strong>D</strong>ata <strong>A</strong>ccess <strong>O</strong>bject is
    a class responsible of the data management for one <strong>datamodel</strong> class</p>

<p>So every time you'll need to retrieve or to save a data model class, you should pass this data model
    as a parameter of one of the DAO methods, and the DAO will handle the rest for you. This has a major
    convenient side-effect: it makes your code <strong>testable</strong></p>

<h3 class="title">One logic, several realizations : using interfaces</h3>

<p>Why should we use interface here? If you remember, an interface is the representation of a defined
    behaviour.</p>

<p>It allows to write the code logic (eg: the Identity is filled, it is passed to the DAO for
    persistence), once and if you want to change how the DAO is <strong>internally</strong> working,
    while letting your main logic untouched.</p>

<h4 class="title">Define the DAO operations</h4>

<p>As mentionned in the exercise description, the DAO should be able to <strong>write an
    identity</strong> and to <strong>read all identities</strong>. As a result, the DAO interface
    definition will look like:</p>

<div class="graph">
    <img src="../../../../images/svg/java-bases-idDAO.svg"/>
</div>
and the result in Java
                <pre><code class="java">package fr.tbr.iamcore.dao;

import java.util.List;
import fr.tbr.iamcore.identity.Identity;

/**
 * Handles the storage of Identity objects
 * @author Tom
 */
public interface IdentityDAO {

	/**
	 * Allows to store the given identity
	 * @param identity
	 * @return true if the storage has been successful
	 */
	public boolean store(Identity identity);

	/**
	 * Retrieve all the stored identities
	 * @return a List of identities
	 */
	public List&lt;Identity> getAllIdentities();

}</code></pre>

<p>As you can see, this interface can do nothing by itself, except giving the main behaviour of the
    DAOs </p>
<h4 class="title">Define the file implementation for IdentityDAO </h4>

<p>We will define a new implementation by declaring this class</p>
 <pre><code class="java">package fr.tbr.iamcore.dao;

import fr.tbr.iamcore.identity.Identity;

public class IdentityFileDAO implements IdentityDAO{

	@Override
	public boolean store(Identity identity) {
        return false;
	}

	@Override
	public List&lt;Identity> getAllIdentities() {
         return null;

	}
}
</code></pre>

<h1 class="page-header" id="write">First operation : store Identity objects</h1>

<p>To achieve the Identity persistence in the file called <code>idList.txt</code>:
</p>
<pre><code class="java">package fr.tbr.iamcore.dao;

import fr.tbr.iamcore.identity.Identity;

public class IdentityFileDAO implements IdentityDAO{


	@Override
	public boolean store(Identity identity) {
		File file = new File("/identities/idlist.txt");
		try {
			if (!file.exists()){
				file.createNewFile();
			}
			// append mode
			FileWriter fileWriter = new FileWriter(file, true);
			PrintWriter writer = new PrintWriter(fileWriter, true);
			writer.println("---Begin Identity---");
			writer.println(identity.getDisplayName());
			writer.println(identity.getEmail());
			writer.println("---End Identity---");
			writer.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return true;

	}

	@Override
	public List&lt;Identity> getAllIdentities() {
        return null;
	}

}


</code></pre>
<h1 class="page-header" id="read">Second operation : read all Identity objects</h1>

<p>To achieve that, you will need to open the file again, and read its content</p>
<pre><code class="java">package fr.tbr.iamcore.dao;

import fr.tbr.iamcore.identity.Identity;

public class IdentityFileDAO implements IdentityDAO{


	@Override
	public boolean store(Identity identity) {
		File file = new File("/identities/idlist.txt");
		try {
			if (!file.exists()){
				file.createNewFile();
			}
			// append mode
			FileWriter fileWriter = new FileWriter(file, true);
			PrintWriter writer = new PrintWriter(fileWriter, true);
			writer.println("---Begin Identity---");
			writer.println(identity.getDisplayName());
			writer.println(identity.getEmail());
			writer.println("---End Identity---");
			writer.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return true;

	}

	@Override
	public List&lt;Identity> getAllIdentities() {
        List&lt;Identity> list = new ArrayList&lt;Identity>();
		try {
			Scanner scanner = new Scanner(new FileReader("/identities/idlist.txt"));
			while(scanner.hasNext()){
				Identity currentIdentity = new Identity();
				String string = scanner.nextLine();
				currentIdentity.setDisplayName(scanner.nextLine());
				currentIdentity.setEmail(scanner.nextLine());
				list.add(currentIdentity);
				scanner.nextLine();
			}
			scanner.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return list;

	}

}
</code></pre>
<h1 class="page-header" id="usage">Example of usage</h1>

<pre><code class="java">//...
IdentityDAO identityDAO = new IdentityFileDAO();
identityDAO.store(new Identity("id-01","testid","test@test.com" ));
List&lt;Identity> identities = identityDAO.getAllIdentities();
//...
</code></pre>

<h1 class="page-header" id="src">Source code</h1>
You can import the <a href="../resources/IamCoreTutorial.zip">Source Code</a> and see how it works in Eclipse
</div>
</div>
<!-- container -->
</div>
</div>


<div id="footer">
    <div class="container text-muted">
        Thomas Broussard &#169; 2014
    </div>
</div>

<!-- Latest compiled and minified JavaScript -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
<script src="http://thomas-broussard.fr/scripts/bootstrap/doc/docs.min.js"></script>
<script src="http://thomas-broussard.fr/scripts/rainbow/rainbow.js"></script>
</body>

</html>