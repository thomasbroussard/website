<html xmlns="http://www.w3.org/1999/xhtml">

<head>


    <!-- Basic Page Needs
  ================================================== -->
    <meta charset="utf-8"/>
    <title>(Not) Just Java</title>
    <meta name="description" content=""/>
    <meta name="author" content="Thomas Broussard"/>

    <!-- Mobile Specific Metas
  ================================================== -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>

    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="shortcut icon" href="../../../../images/favicon.ico"/>
    <link href="../../../../stylesheets/doc-bs.css" rel="stylesheet"/>
    <link href="../../../../stylesheets/custom.css" rel="stylesheet"/>
    <title>(Not) Just Java</title>

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"/>

    <!-- Optional theme -->
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css"/>
    <link rel="stylesheet" type="text/css" href="../../../../stylesheets/github-rainbow.css"/>

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->


</head>
<body>
<!-- Main jumbotron for a primary marketing message or call to action -->
<!-- Docs page layout -->
<div class="bs-docs-header" id="content">
    <div class="container">
        <h1>Java Environment and Language syntax</h1>

        <p>Global description of the Java programming language</p>

    </div>

</div>

<div class="container bs-docs-container">

<div class="row">
<div class="col-md-3">
    <div class="bs-docs-sidebar hidden-print" role="complementary">
        <ul class="nav bs-docs-sidenav">
            <li><a href="#histo">History</a></li>
            <li><a href="#abstract">Abstraction</a></li>
            <li><a href="#oop">Object Oriented</a></li>
            <li><a href="#automem">Auto. Memory Management</a></li>
            <li><a href="#wij-conclusion">Conclusion</a></li>
        </ul>
        <a class="back-to-top" href="#content">
            Back to top
        </a>
    </div>


</div>
<div class="col-md-9" role="main">
<ol class="breadcrumb">
    <li><a href="../../../../index.xhtml">Home</a></li>
    <li><a href="../../../index.xhtml">Work</a></li>
    <li><a href="../../index.xhtml">Java</a></li>
    <li><a href="../index.xhtml">Courses</a></li>
    <li class="active">Java - Global Description</li>
</ol>
<div class="bs-docs-section">

    <h1 id="wij" class="page-header">What is Java?</h1>

    <p> This section performs an overview about the Java language, history and base concepts are quickly
        described</p>
    <h3 class="title" id="histo">History: Java and the JVM</h3>

    <p>What was there before Java? We are in 1995, and the C and C++ languages dominate the world of
        programming
        at this
        date.
        Although these languages are very efficient in their own scopes, programmers are spending a lot
        of time
        in
        porting applications from one environment to another, because
        programs use directly the native libraries of each system, and this implies to change a part of
        a
        program when
        you want it to run on different environment...
    </p>

    <div class="bs-callout bs-callout-info">
        <div class="title">Note on the code portability</div>
        <div class="content">
            <p>C/C++ developers are aware of those platform-specific problem. Specific codes are
                generally separated from the rest of the logic.
                These developers must stay attentive, because some native APIs can be unintentionally
                inserted into the general code.
            </p>

            <p> Also, sometimes the general logic and the specific code do not dissociate properly, for
                example the following code (<a href="http://c-faq.com/osdep/readdir.html">found
                    here </a>)</p>

                        <pre>
                            <code class="c">
/*here is a tiny example which lists the files in the current directory*/
#include &#60;stdio.h&#62;
#include &#60;sys/types.h&#62;
#include &#60;dirent.h&#62;

int main(){
    struct dirent *dp;
    dir *dfd = opendir(".");
    if(dfd != null) {
        while((dp = readdir(dfd)) != null){
            printf("%s\n", dp->d_name); /*you can't do much better without a specific API*/
        }
        closedir(dfd);
    }
    return 0;
}
                            </code>
                        </pre>
            <p>In this sample, you can't do much more than reading files name staying cross-platform. If
                you want to do more, you must call native environment APIs, which makes your code
                adherent to this platform</p>
        </div>
    </div>


    <p>
        This is pretty bad, because the cost of porting an application does not stop to the native calls
        area, this also affects the rest of the program, because native calls does not behave the same
        way.
        An other cost is the validation of each environment.</p>

    <p>An other thing which is environment specific is the binary produced by the compilation : even if
        you took great care about using cross-platform APIs, there you do not have the choice.
        Each system has its specific format for binary executable (<code>.exe, .dll</code> for Windows
        <code>.elf, .so</code> for Linux etc.).
        It adds to the validation an other cost, because these different type of files does not behave
        equally, and their generation can also bring errors during execution.
    </p>

    <p>
        From this observation, a company named Sun produced at this date (remember, we're in 1995) a
        totally new and revolutionary system: the Java Virtual Machine (JVM).
    </p>
    <h3 class="title" id="abstract">Abstraction</h3>

    <p>
        This JVM *is* itself an environment, but a special one: it is Virtual. That means that by
        itself, a JVM
        can do
        nothing:
    </p>
    <ul class="circle">
        <li>The JVM must have a physical host, because the JVM is only a program that runs on an host
        </li>
        <li>The JVM must have been designed for this host</li>
        <li>The JVM only reads Java byte code</li>

    </ul>

    <p>Those 3 remarks allow to see a bit more clearly the goal of the JVM: The JVM abstracts the code
        written
        in Java
        from those bad native calls that cost developers so much time! In fact, the code is written in
        Java,
        this code
        is compiled to make a <code>.class</code> which is the kind of file the JVM can work with. This
        code is
        converted by the JVM that delegates native calls to its specific implementation and everything
        that will
        lead to
        an environment specific treatment (filesystem access, network etc.) is handled by the JVM,
        totally
        transparently
        for the programmer </p>

    <h3 class="title" id="oop">An OOP language</h3>

    <p>You probably noticed the term <code>.class</code> is mentioned just above. Indeed, Java is an
        Object Oriented Programming language. This is not strong enough: Java is Massively Object
        Oriented! In Java,
        every little thing is an object </p>

    <p>It implies that every files produced during the compilation phase is a <code>.class</code> file
    </p>

    <h3 class="title" id="automem">Automatic Memory Management</h3>

    <p>The main bug source in languages like C and C++, is that you manage the memory yourself. It may
        seem
        mandatory in
        certain case, but in most of the case, the lack of concentration of a developer can ruin the
        fine work
        of his
        colleagues.</p>

    <p>
        The JVM proposes an automatic memory management system which allows developers to be free of
        that
        concern! You
        simply use what you need to use and the system automatically send to garbage what you don't need
        anymore.
        In fact a good knowledge of what is done behind the scene is required, but this avoid to consume
        time in
        a lot
        of cases.
    </p>

    <p> This mechanism is called Garbage Collection. A garbage collector is an entity inside the jvm
        that
        handles
        useless objects. Its action is configurable, as it lays on interchangeable algorithms. </p>

    <h3 class="title" id="wij-conclusion">Conclusion</h3>

    <p>
        Java is more than a language, it is an environment, where several components are involved. Java
        allows developer to gain time when designing applications, and also when they deploy them across
        several
        environment.
    </p>

<h1 class="page-header" id="jp">Java programing, structure and syntax</h1>

<p>Be ready, this part will be rough but you cannot pretend to have skills in Java without reading
    it</p>


<p>So... We said that in Java, everything was an object? This is true 99.9% of the time, so we'll
    start with learning what is a class structure </p>

<h3 class="title">The class, a Java object</h3>

<p>Java Objects representation is made through a "class" file. At the beginning, the class is a java file.
    The class name is the way this object will be called in the developer code. This name must be the name
    of the file containing this class definition. The extension of a non compiled class (the way human usually edit
    classes) is <code>*.java</code></p>

<p>There is an example below:</p>
					<pre><code class="java">package fr.tbr.demo;

/**
 * @author Thomas Broussard
 *         Date: 29/09/13
 */
public class MyDemoClass {
    /**
     * A private field that must be initialized during the instance construction phase
     */
    private String mainText;

    /**
     * private integer field, this is a primitive type
     */
    private int age;

    /**
     * A final field that never changes during the execution
     */
    private static final String AUTHOR = "Thomas Broussard";

    /**
     * Static method to get a data shared by all of the instances of MyDemoClass
     * @return the author of the class
     */
    public static String getAuthor() {
        return AUTHOR;
    }

    /**
     * Constructor of a MyDemoClass object
     * @param mainText
     */
    public MyDemoClass(String mainText) {
        this.mainText = mainText;
		this.age=28;
    }

    /**
     * Performs a demo on the current instance of MyDemoClass
     */
    public void doTheDemo() {
           String result =  "This wonderful demo class has been written by "
                   + AUTHOR + " and this object has been initialized with :"
                   + this.mainText;
           System.out.println(result);    // access to the standard output
    }

    /**
     * A method that overrides the Object (super class of all classes);
     * @return a String containing the mainText field value
     */
    @Override
    public String toString() {
        return mainText;
    }
}


					</code>

					</pre>
<p>This is how we can define an object in Java, the following items are to be explained:

</p>
<ul class="circle">
    <li><h4>The first line : the package declaration</h4>

        <p>The first line defines the package in which the class is located. A package is represented
            physically by a folder, and it is where the <code>.java</code> files will be reachable.
            A package is a necessary mean to organize the code, and generally avoid mistakes when the project grows
            bigger. Indeed, the package name can be used to
        </p>

        <p>It is advised to define a <strong>namespace</strong> using the package tree ; a namespace is a (normally)
            unique prefix, indicating that the code inside any sub tree of this namespace is yours </p>

        <p>This is necessary to avoid class naming collision (two classes having the same name). In this example,
            the namespace is <code class="java">fr.tbr</code></p>
    </li>
    <li>
        <h4>The "weird" comment: Javadoc</h4>

        <p>In java, you have powerful allies. Like in all languages you have comment at your disposal to indicate a
            critical part of your program</p>

        <p>This is good, but in fact this is the true minimum. Java can help you better, thanks to the Javadoc
            system. The javadoc system is an improvement of the comment principle, allowing developer to generate a
            technical documentation directly from the code</p>

        <p>To indicate a Javadoc comment, you'll have to dispose a simple block comment "A la C" and add a second
            star, examples below:</p>
			<pre><code class="java">/** Javadoc */
/* Block comment */
// Line comment</code> </pre>
        <p>The Javadoc is part of your Java program, it is standard and you'll have to provide javadoc on everything
            that is <code>public</code>
            This will help your teammates to understand and to reuse your code quickly. Indeed, the Javadoc will be
            compiled (if asked) in a browseable html format, an example is here:
            <a href="http://commons.apache.org/proper/commons-lang/javadocs/api-3.1/">Apache commons Javadoc</a>

        </p>

        <p>You may have noticed a strange <code>@author</code> indication, this is the way the javadoc system
            indicates the author of a program part. Several keywords exist, allowing to highlight what is generally
            important to in a program</p>

    </li>
    <li><h4>What really matters: the Class definition</h4>

        <p>Notice the class definition </p>
				<pre>
<code class="java">public class MyDemoClass {
//...
}</code></pre>
        <p>There are three things to note:</p>
        <ul class="circle">
            <li><strong><code>public</code></strong> this is the <strong>Visibility modifier</strong>

                <p>It is a classical feature of OOP languages, it allows the developer to select which method is
                    reachable by another class code. The class which the name is the same as the compilation unit
                    <strong>must be public (or package protected, although this is usually not what you want to
                        do)</strong></p>

                <p>This modifier system is applicable to any other entities composing the class</p>
                <table class="zebra">
                    <thead>
                    <tr>
                        <th>Modifier name</th>
                        <th>Effect</th>
                    </tr>

                    </thead>
                    <tbody>
                    <tr>
                        <td><strong><code>public</code></strong>
                        </td>
                        <td><p>This modifier indicates that every class can access to the entity</p></td>
                    </tr>
                    <tr>
                        <td><strong><code>protected</code></strong>
                        </td>
                        <td><p>Only sub-classes (via inheritance) can have access to elements marked with this
                            identifier</p></td>
                    </tr>
                    <tr>
                        <td><strong><code>private</code> </strong>
                        </td>
                        <td><p>Only the current class can have access to private properties</p></td>
                    </tr>
                    <tr>
                        <td><strong><code>(none)</code> </strong>
                        </td>
                        <td><p>When no modifier is specified, it means the property is only reachable by classes
                            located in the same package </p></td>
                    </tr>

                    </tbody>
                </table>
            </li>
            <li><strong><code>class</code></strong> indicates this is a class, there are several <strong>kinds</strong>
                of entities
                <p>Several values are possible</p>
                <table class="zebra">
                    <thead>
                    <tr>
                        <th>Kind of entity</th>
                        <th>Description</th>
                    </tr>

                    </thead>
                    <tbody>
                    <tr>
                        <td><strong><code>class</code></strong>
                        </td>
                        <td><p>It means the current compilation unit is a class, meaning it represents an object</p>
                        </td>
                    </tr>
                    <tr>
                        <td><strong><code>interface</code></strong>
                        </td>
                        <td><p>Interfaces are the way Java defines "meta-class", you can see it as a characteristic
                            shared by several classes.
                            A typical real-world example is to say that a dog can howl and so does a wolf, although a
                            dog is not a wolf and vice-versa.
                            An interface "Howler" can be defined so the behaviour of howling can be shared by several
                            classes, even if these classes do not inherit from one to each other.
                        </p>

                            <p>This quick definition of interfaces will be completed in a dedicated part of this
                                course </p>
                        </td>
                    </tr>
                    <tr>
                        <td><strong><code>enum</code> </strong>
                        </td>
                        <td><p>Enums are specific objects. the word "enum" stands for "enumeration" and the goal of this
                            kind of class is contained inside this word: they are to represent a constant collection of
                            objects</p>

                            <p>An enum is very useful when you want to structure your code, it is a recommended way to
                                define property of an object when this object has to leave its Java Object shape (ie,
                                when this object is required to be serialized)</p>
                        </td>
                    </tr>

                    </tbody>
                </table>
            </li>
            <li><strong><code>MyDemoClass</code></strong> this is the name of the object that defines the class. The
                compilation unit
                (the name of the Java file) must be the same, here <code>MyDemoClass.java</code></li>
        </ul>

    </li>
</ul>
<h3 class="title">Class fields</h3>


<p>In the previous example, there are two class fields : the first is of type <code>String</code>, the second is
    declared as an int
    what other kinds of Java built-in types could
    you see in a program?</p>

<h4>Two main kinds of types in Java</h4>

<p>Java has two kinds of types: the <strong>primitive</strong> and the <strong>object</strong>
    types... Remember? we said that every thing was an object in Java, this is wrong again.</p>
<strong>Primitive types</strong>

<p>The primitive types look like C native types, although they have a default value. You will find a description
    of
    these types hereafter:</p>

<div class="table-container">
    <table class="zebra">
        <thead>
        <tr>
            <th>Primitive type</th>
            <th>Description</th>
            <th>Range</th>
        </tr>

        </thead>
        <tbody>
        <tr>
            <th class="center" colspan="3">Integer types</th>
        </tr>
        <tr>
            <td><strong><code>byte</code></strong>
            </td>
            <td><p>a signed byte</p></td>
            <td><p>-128 to 127</p></td>
        </tr>
        <tr>
            <td><strong><code>short</code></strong>
            </td>
            <td><p>This is a two-bytes signed integer, it defaults to 0 if not initialized</p></td>
            <td><p>-32,768 to 32,767</p></td>
        </tr>
        <tr>
            <td><strong><code>int</code></strong>
            </td>
            <td><p>This is a signed integer, it defaults to 0 if not initialized</p></td>
            <td><p>-2,147,483,648 to 2,147,483,647 (inclusive)</p></td>
        </tr>
        <tr>
            <td><strong><code>long</code></strong>
            </td>
            <td><p>The long is a signed integer with a wider range: </p>

                <p>the declaration of a <code>long</code> is a bit different, you should do it as described below
                </p>
					<pre>
						<code class="java">
long primitiveLong = 1222222333335555l;
						</code>
					</pre>
            </td>
            <td><p>-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</p></td>
        </tr>
        <tr>
            <th class="center" colspan="3">Floating types</th>
        </tr>
        <tr>
            <td><strong><code>float</code></strong>
            </td>
            <td><p>The <code>float</code> is a signed floating point number </p></td>
            <td><p>1.40129846432481707e-45 to 3.40282346638528860e+38</p></td>
        </tr>
        <tr>
            <td><strong><code>double</code> </strong>
            </td>
            <td><p>The <code>double</code> is a type aiming at covering a very large range of values. However, its
                usage
                is discouraged since it is addressed on a 8 bytes format. If you use large tables of values, prefer
                float (if the range is ok for that)</p></td>
            <td><p>4.94065645841246544e-324d to 1.79769313486231570e+308d</p></td>
        </tr>
        <tr>
            <th class="center" colspan="3">Other</th>
        </tr>
        <tr>
            <td><strong><code>boolean</code> </strong>
            </td>
            <td><p>the boolean in Java can have two values <code>true</code> or <code>false</code>, which are
                reserved
                keywords of the language </p></td>
            <td><code>true</code> or <code>false</code></td>
        </tr>
        <tr>
            <td><strong><code>char</code> </strong>
            </td>
            <td><p>2 bytes, unsigned, Unicode, <code>char</code> are used to represent characters, but are not
                directly
                compatible with integers or Strings</p></td>
            <td><p>0 to 65,535</p></td>
        </tr>

        </tbody>
    </table>
</div>
<strong>The Object type</strong>

<p>The Object type allows to reference an other object inside your main object, this is a normal object what can
    be built-in or "custom" (meaning your own object).
    Among the noticeable built-in types, there are:
</p>
<ul>
    <li>
        <strong><code>String</code></strong> : this is the way to represent a characters string in Java
    </li>
    <li>
        <strong><code>Integer</code></strong> : this is one of the numerous objects representing a raw type in the
        object style.
        If you want to read more of that, consider reading the Autoboxing paragraph, just below.
    </li>
    <li>
        <strong>Other complex data structures</strong> : read more on the next level about lists, maps, XML
        manipulations etc. <a href="#"> here >></a>
    </li>
</ul>

<h3 class="title">Autoboxing</h3>

<p>The Autoboxing mechanism is integrated in Java. It allows to convert an object into a primitive type, as the code
    shows below:</p>
<pre>
	<code class="java">
/**
 * Shows how primitive types can be "boxed" (automatically cast) to Objects
 */
    final char character = 0;
    final byte veryShortInt = 0;
    final short shortInt = 0;
    final int normalInt = 0;
    final long longInt = 0l;

    final float floatingPoint = 0;
    final double bigFloatingPoint = 0;

    final boolean aBooleanExample = true;

    // Object style

    final Byte byteSample = veryShortInt;
    final Short shortSample = shortInt;
    final Integer intSample = normalInt;
    final Long longSample = longInt;

    final Float floatSample = floatingPoint;
    final Double doubleSample = bigFloatingPoint;

    final Boolean booleanSample = aBooleanExample;
	</code>
</pre>
<h3 class="title">Using the defined object</h3>

<p>How to use the defined object? We should introduce a new keyword : the well named <code>new</code> operator.
    The new operator allows to create a new instance of the defined class reference.</p>

<p> In order to understand better the object concept in Java, you have to understand that one class is the "template" of
    an object, this is only a definition.
    When you use instances of that class, they all have their own fields values.
</p>

<p>Only things shared by all theses instances are the <code>static</code> fields. Static fields are common to all
    instances, allowing to share data between them.
</p>

<div class="graph">

    <div class="graph-title">An example with an "Identity" object</div>
    <object data="../../../../images/svg/oop-identity-def.svg" type="image/svg+xml">
    </object>
    <object data="../../../../images/svg/oop-class-instances.svg" type="image/svg+xml"/>
</div>
<p>In the code, you'll have to do the instanciation like the following :</p>
<pre><code class="java">Identity thomas = new Identity("Thomas Broussard", "01", "t.b@sample.com");
Identity quentin = new Identity("Quentin", "02", "q.d@sample.com");
Identity clement = new Identity("Clément", "03", "c.s@sample.com");
</code></pre>

<h4>Use the Java objects</h4>

<p>We saw just before how to create new Java objects, now how to use them ? </p>

<p>To use an object, this object should already have a built-in behaviour to invoke in this object user's code.
    As an example, let's define an object representing a car:</p>

<div class="graph">
    <div class="graph-title">Car definition</div>
    <object data="../../../../images/svg/oop-car-def.svg" type="image/svg+xml"/>
</div>

<div>
    <p>There is the code hereafter :</p>
	<pre>
		<code class="java">package fr.tbr.demo;

/**a car representation*/
public class Car{

    private String model;
    private String brand;

    private boolean engineStarted;


    public Car(String model, String brand) {
		super();
		this.model = model;
		this.brand = brand;
    }

    public void start(){
		this.engineStarted = true;
    }

    public void stop(){
		this.engineStarted = false;
    }

    @Override
    public String toString() {
		return "Car [model=" + model + ", brand=" + brand +
			", engineStarted=" + engineStarted + "]";
    }

}</code>
	</pre>

</div>
<p>Here the object has two behaviours, start() and stop(). Each action has an effect on the car state. In Java, the way
    of
    making a call to these behaviours is :</p>
<pre>
	<code class="java">
Car timeMachine = new Car("DeLorean-DMC12", "DMC");
timeMachine.start();
timeMachine.stop();
	</code>
</pre>

<h4>Objects concepts in Java</h4>
<ul>
    <li><strong>Inheritance</strong>

        <p>The inheritance mechanism is defined via the <code><strong>extends</strong></code> keyword</p>

        <p>To follow the previous example, the way to define an inheritance between a motor-vehicle and a car
            (specialization) is defined by the code after</p>


		<pre><code class="java">
package fr.tbr.demo;

/**a car representation*/
public class Car extends MotorVehicle{



    private String model;
    private String brand;




    public Car(String model, String brand) {
	super();
	this.model = model;
	this.brand = brand;
    }



    @Override
    public String toString() {
	String returned = "Car [model=" + model +
			", brand=" + brand + ", engineStarted=" + engineStarted + "]";
	Car timeMachine = new Car("DeLorean-DMC12", "DMC");
	timeMachine.start();
	timeMachine.stop();
	return returned;

    }
}
		</code></pre>

        <p>And the UML schema</p>
        <div class="graph">
            <div class="graph-title">Inheritance</div>
            <object data="../../../../images/svg/oop-car-inheritance.svg" type="image/svg+xml" />
        </div>
        <p>Notice that you can use the properties of the parent object in the inherited object thanks to the
            <code><strong>super</strong></code> operator</p>
    </li>
</ul>

<h4>Common operators</h4>

<p>In Java there are a lot of operators, only a little part is daily used. This part presents these operators and how to
    use them in a java program</p>


</div>

</div>
<!-- container -->
</div>
</div>



<div id="footer">
    <div class="container text-muted">
        Thomas Broussard &#169; 2014
    </div>
</div>

<!-- Latest compiled and minified JavaScript -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
<script src="http://thomas-broussard.fr/scripts/bootstrap/doc/docs.min.js"></script>
<script src="http://thomas-broussard.fr/scripts/rainbow/rainbow.js"></script>
</body>

</html>