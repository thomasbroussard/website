<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<title>Welcome to the JVM</title>
	<meta content="text/html"/>


	<!-- Basic Page Needs
  ================================================== -->
	<title>Welcome To the JVM</title>
	<meta name="description" content=""/>
	<meta name="author" content=""/>

	<!-- Mobile Specific Metas
  ================================================== -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>

	<!-- CSS
  ================================================== -->
	<link rel="stylesheet" href="../../../../stylesheets/base.css"/>
	<link rel="stylesheet" href="../../../../stylesheets/skeleton.css"/>
	<link rel="stylesheet" href="../../../../stylesheets/layout.css"/>

	<link rel="stylesheet" type="text/css" href="../../../../stylesheets/github-rainbow.css"/>
	<!-- Scripts
	=============================================== -->


	<!--[if lt IE 9]>
	<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->

	<script type="text/javascript" src="../../../../scripts/rainbow/rainbow.js"></script>

</head>
<body>
<div lang="en" xmlns="http://www.w3.org/1999/xhtml">
<div class="container page">
<div class="sixteen columns">
	<h1 class="remove-bottom">Welcome to the Virtual Machine</h1>
	<cite>Thomas Broussard</cite>
	<hr/>
</div>
<div class="three columns sidebar">

	<nav>
		<div class="title">Summary</div>
		<strong>What is Java?</strong>
		<ol>
			<li><a href="#histo">History</a></li>
			<li><a href="#abstract">Abstraction</a></li>
			<li><a href="#oop">Object Oriented</a></li>
			<li><a href="#automem">Auto. Memory Management</a></li>
			<li><a href="#wij-conclusion">Conclusion</a></li>
		</ol>
		<strong>Language definition</strong>
		<ol>
			<li><a href="#jp">Java programming, structure and syntax</a></li>
		</ol>


	</nav>
</div>
<div class="thirteen columns offset-by-three content">
<div class="breadcrumbs">
	<a href="../../../../index.xhtml">Home</a> > <a href="../../../../work/index.xhtml">Work</a> > <a
		href="../../../../work/java/index.xhtml">Java</a> > <a
		href="../../../../work/java/courses/index.xhtml">Courses</a>
	> <strong>Welcome to the JVM</strong>
</div>
<ul>
<li>
	<h4 id="wij">What is Java?</h4>

	<p> This section performs an overview about the Java language, history and base concepts are quickly
		described</p>
	<h5 id="histo">History: Java and the JVM</h5>

	<p>What was there before Java? We are in 1995, and the C and C++ languages dominate the world of
		programming
		at this
		date.
		Although these languages are very efficient in their own scopes, programmers are spending a lot
		of time
		in
		porting applications from one environment to another, because
		programs use directly the native libraries of each system, and this implies to change a part of
		a
		program when
		you want it to run on different environment...
	</p>

	<div class="note">
		<div class="title">Note on the code portability</div>
		<div class="content">
			<p>C/C++ developers are aware of those platform-specific problem. Specific codes are
				generally separated from the rest of the logic.
				These developers must stay attentive, because some native APIs can be unintentionally
				inserted into the general code.
			</p>

			<p> Also, sometimes the general logic and the specific code do not dissociate properly, for
				example the following code (<a href="http://c-faq.com/osdep/readdir.html">found
					here </a>)</p>

                        <pre>
                            <code class="c">
/*here is a tiny example which lists the files in the current directory*/
#include &#60;stdio.h&#62;
#include &#60;sys/types.h&#62;
#include &#60;dirent.h&#62;

int main(){
    struct dirent *dp;
    dir *dfd = opendir(".");
    if(dfd != null) {
        while((dp = readdir(dfd)) != null){
            printf("%s\n", dp->d_name); /*you can't do much better without a specific API*/
        }
        closedir(dfd);
    }
    return 0;
}
                            </code>
                        </pre>
			<p>In this sample, you can't do much more than reading files name staying cross-platform. If
				you want to do more, you must call native environment APIs, which makes your code
				adherent to this platform</p>
		</div>
	</div>


	<p>
		This is pretty bad, because the cost of porting an application does not stop to the native calls
		area, this also affects the rest of the program, because native calls does not behave the same
		way.
		An other cost is the validation of each environment.</p>

	<p>An other thing which is environment specific is the binary produced by the compilation : even if
		you took great care about using cross-platform APIs, there you do not have the choice.
		Each system has its specific format for binary executable (<code>.exe, .dll</code> for Windows
		<code>.elf, .so</code> for Linux etc.).
		It adds to the validation an other cost, because these different type of files does not behave
		equally, and their generation can also bring errors during execution.
	</p>

	<p>
		From this observation, a company named Sun produced at this date (remember, we're in 1995) a
		totally new and revolutionary system: the Java Virtual Machine (JVM).
	</p>
	<h5 id="abstract">Abstraction</h5>

	<p>
		This JVM *is* itself an environment, but a special one: it is Virtual. That means that by
		itself, a JVM
		can do
		nothing:
	</p>
	<ul class="circle">
		<li>The JVM must have a physical host, because the JVM is only a program that runs on an host
		</li>
		<li>The JVM must have been designed for this host</li>
		<li>The JVM only reads Java byte code</li>

	</ul>

	<p>Those 3 remarks allow to see a bit more clearly the goal of the JVM: The JVM abstracts the code
		written
		in Java
		from those bad native calls that cost developers so much time! In fact, the code is written in
		Java,
		this code
		is compiled to make a <code>.class</code> which is the kind of file the JVM can work with. This
		code is
		converted by the JVM that delegates native calls to its specific implementation and everything
		that will
		lead to
		an environment specific treatment (filesystem access, network etc.) is handled by the JVM,
		totally
		transparently
		for the programmer </p>

	<h5 id="oop">An OOP language</h5>

	<p>You probably noticed the term <code>.class</code> is mentioned just above. Indeed, Java is an
		Object Oriented Programming language. This is not strong enough: Java is Massively Object
		Oriented! In Java,
		every little thing is an object </p>

	<p>It implies that every files produced during the compilation phase is a <code>.class</code> file
	</p>

	<h5 id="automem">Automatic Memory Management</h5>

	<p>The main bug source in languages like C and C++, is that you manage the memory yourself. It may
		seem
		mandatory in
		certain case, but in most of the case, the lack of concentration of a developer can ruin the
		fine work
		of his
		colleagues.</p>

	<p>
		The JVM proposes an automatic memory management system which allows developers to be free of
		that
		concern! You
		simply use what you need to use and the system automatically send to garbage what you don't need
		anymore.
		In fact a good knowledge of what is done behind the scene is required, but this avoid to consume
		time in
		a lot
		of cases.
	</p>

	<p> This mechanism is called Garbage Collection. A garbage collector is an entity inside the jvm
		that
		handles
		useless objects. Its action is configurable, as it lays on interchangeable algorithms. </p>

	<h5 id="wij-conclusion">Conclusion</h5>

	<p>
		Java is more than a language, it is an environment, where several components are involved. Java
		allows developer to gain time when designing applications, and also when they deploy them across
		several
		environment.
	</p>
</li>
<li>
<hr/>
<h4 id="jp">Java programing, structure and syntax</h4>

<p>Be ready, this part will be rough but you cannot pretend to have skills in Java without reading
	it</p>


<p>So... We said that in Java, everything was an object? This is true 99.9% of the time, so we'll
	start with learning what is a class structure </p>

<h5>The class, a Java object</h5>

<p>Java Objects representation is made through a "class" file. At the beginning, the class is a java file.
	The class name is the way this object will be called in the developer code. This name must be the name
	of the file containing this class definition. The extension of a non compiled class (the way human usually edit
	classes) is <code>*.java</code></p>

<p>There is an example below:</p>
					<pre><code class="java">package fr.tbr.demo;

/**
 * @author Thomas Broussard
 *         Date: 29/09/13
 */
public class MyDemoClass {
    /**
     * A private field that must be initialized during the instance construction phase
     */
    private String mainText;

    /**
     * private integer field, this is a primitive type
     */
    private int age;

    /**
     * A final field that never changes during the execution
     */
    private static final String AUTHOR = "Thomas Broussard";

    /**
     * Static method to get a data shared by all of the instances of MyDemoClass
     * @return the author of the class
     */
    public static String getAuthor() {
        return AUTHOR;
    }

    /**
     * Constructor of a MyDemoClass object
     * @param mainText
     */
    public MyDemoClass(String mainText) {
        this.mainText = mainText;
		this.age=28;
    }

    /**
     * Performs a demo on the current instance of MyDemoClass
     */
    public void doTheDemo() {
           String result =  "This wonderful demo class has been written by "
                   + AUTHOR + " and this object has been initialized with :"
                   + this.mainText;
           System.out.println(result);    // access to the standard output
    }

    /**
     * A method that overrides the Object (super class of all classes);
     * @return a String containing the mainText field value
     */
    @Override
    public String toString() {
        return mainText;
    }
}


					</code>

					</pre>
<p>This is how we can define an object in Java, the following items are to be explained:

</p>
<ul class="circle">
	<li><h6>The first line : the package declaration</h6>

		<p>The first line defines the package in which the class is located. A package is represented
			physically by a folder, and it is where the <code>.java</code> files will be reachable.
			A package is a necessary mean to organize the code, and generally avoid mistakes when the project grows
			bigger. Indeed, the package name can be used to
		</p>

		<p>It is advised to define a <strong>namespace</strong> using the package tree ; a namespace is a (normally)
			unique prefix, indicating that the code inside any sub tree of this namespace is yours </p>

		<p>This is necessary to avoid class naming collision (two classes having the same name). In this example,
			the namespace is <code class="java">fr.tbr</code></p>
	</li>
	<li>
		<h6>The "weird" comment: Javadoc</h6>

		<p>In java, you have powerful allies. Like in all languages you have comment at your disposal to indicate a
			critical part of your program</p>

		<p>This is good, but in fact this is the true minimum. Java can help you better, thanks to the Javadoc
			system. The javadoc system is an improvement of the comment principle, allowing developer to generate a
			technical documentation directly from the code</p>

		<p>To indicate a Javadoc comment, you'll have to dispose a simple block comment "A la C" and add a second
			star, examples below:</p>
			<pre><code class="java">/** Javadoc */
/* Block comment */
// Line comment</code> </pre>
		<p>The Javadoc is part of your Java program, it is standard and you'll have to provide javadoc on everything
			that is <code>public</code>
			This will help your teammates to understand and to reuse your code quickly. Indeed, the Javadoc will be
			compiled (if asked) in a browseable html format, an example is here:
			<a href="http://commons.apache.org/proper/commons-lang/javadocs/api-3.1/">Apache commons Javadoc</a>

		</p>

		<p>You may have noticed a strange <code>@author</code> indication, this is the way the javadoc system
			indicates the author of a program part. Several keywords exist, allowing to highlight what is generally
			important to in a program</p>

	</li>
	<li><h6>What really matters: the Class definition</h6>

		<p>Notice the class definition </p>
				<pre>
<code class="java">public class MyDemoClass {
//...
}</code></pre>
		<p>There are three things to note:</p>
		<ul class="circle">
			<li><strong><code>public</code></strong> this is the <strong>Visibility modifier</strong>

				<p>It is a classical feature of OOP languages, it allows the developer to select which method is
					reachable by another class code. The class which the name is the same as the compilation unit
					<strong>must be public (or package protected, although this is usually not what you want to
						do)</strong></p>

				<p>This modifier system is applicable to any other entities composing the class</p>
				<table class="zebra">
					<thead>
					<tr>
						<th>Modifier name</th>
						<th>Effect</th>
					</tr>

					</thead>
					<tbody>
					<tr>
						<td><strong><code>public</code></strong>
						</td>
						<td><p>This modifier indicates that every class can access to the entity</p></td>
					</tr>
					<tr>
						<td><strong><code>protected</code></strong>
						</td>
						<td><p>Only sub-classes (via inheritance) can have access to elements marked with this
							identifier</p></td>
					</tr>
					<tr>
						<td><strong><code>private</code> </strong>
						</td>
						<td><p>Only the current class can have access to private properties</p></td>
					</tr>
					<tr>
						<td><strong><code>(none)</code> </strong>
						</td>
						<td><p>When no modifier is specified, it means the property is only reachable by classes
							located in the same package </p></td>
					</tr>

					</tbody>
				</table>
			</li>
			<li><strong><code>class</code></strong> indicates this is a class, there are several <strong>kinds</strong>
				of entities
				<p>Several values are possible</p>
				<table class="zebra">
					<thead>
					<tr>
						<th>Kind of entity</th>
						<th>Description</th>
					</tr>

					</thead>
					<tbody>
					<tr>
						<td><strong><code>class</code></strong>
						</td>
						<td><p>It means the current compilation unit is a class, meaning it represents an object</p>
						</td>
					</tr>
					<tr>
						<td><strong><code>interface</code></strong>
						</td>
						<td><p>Interfaces are the way Java defines "meta-class", you can see it as a characteristic
							shared by several classes.
							A typical real-world example is to say that a dog can howl and so does a wolf, although a
							dog is not a wolf and vice-versa.
							An interface "Howler" can be defined so the behaviour of howling can be shared by several
							classes, even if these classes do not inherit from one to each other.
						</p>

							<p>This quick definition of interfaces will be completed in a dedicated part of this
								course </p>
						</td>
					</tr>
					<tr>
						<td><strong><code>enum</code> </strong>
						</td>
						<td><p>Enums are specific objects. the word "enum" stands for "enumeration" and the goal of this
							kind of class is contained inside this word: they are to represent a constant collection of
							objects</p>

							<p>An enum is very useful when you want to structure your code, it is a recommended way to
								define property of an object when this object has to leave its Java Object shape (ie,
								when this object is required to be serialized)</p>
						</td>
					</tr>

					</tbody>
				</table>
			</li>
			<li><strong><code>MyDemoClass</code></strong> this is the name of the object that defines the class. The
				compilation unit
				(the name of the Java file) must be the same, here <code>MyDemoClass.java</code></li>
		</ul>

	</li>
</ul>
<h5>Class fields</h5>


<p>In the previous example, there are two class fields : the first is of type <code>String</code>, the second is
	declared as an int
	what other kinds of Java built-in types could
	you see in a program?</p>

<h6>Two main kinds of types in Java</h6>

<p>Java has two kinds of types: the <strong>primitive</strong> and the <strong>object</strong>
	types... Remember? we said that every thing was an object in Java, this is wrong again.</p>
<strong>Primitive types</strong>

<p>The primitive types look like C native types, although they have a default value. You will find a description
	of
	these types hereafter:</p>

<div class="table-container">
	<table class="zebra">
		<thead>
		<tr>
			<th>Primitive type</th>
			<th>Description</th>
			<th>Range</th>
		</tr>

		</thead>
		<tbody>
		<tr>
			<th class="center" colspan="3">Integer types</th>
		</tr>
		<tr>
			<td><strong><code>byte</code></strong>
			</td>
			<td><p>a signed byte</p></td>
			<td><p>-128 to 127</p></td>
		</tr>
		<tr>
			<td><strong><code>short</code></strong>
			</td>
			<td><p>This is a two-bytes signed integer, it defaults to 0 if not initialized</p></td>
			<td><p>-32,768 to 32,767</p></td>
		</tr>
		<tr>
			<td><strong><code>int</code></strong>
			</td>
			<td><p>This is a signed integer, it defaults to 0 if not initialized</p></td>
			<td><p>-2,147,483,648 to 2,147,483,647 (inclusive)</p></td>
		</tr>
		<tr>
			<td><strong><code>long</code></strong>
			</td>
			<td><p>The long is a signed integer with a wider range: </p>

				<p>the declaration of a <code>long</code> is a bit different, you should do it as described below
				</p>
					<pre>
						<code class="java">
long primitiveLong = 1222222333335555l;
						</code>
					</pre>
			</td>
			<td><p>-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</p></td>
		</tr>
		<tr>
			<th class="center" colspan="3">Floating types</th>
		</tr>
		<tr>
			<td><strong><code>float</code></strong>
			</td>
			<td><p>The <code>float</code> is a signed floating point number </p></td>
			<td><p>1.40129846432481707e-45 to 3.40282346638528860e+38</p></td>
		</tr>
		<tr>
			<td><strong><code>double</code> </strong>
			</td>
			<td><p>The <code>double</code> is a type aiming at covering a very large range of values. However, its
				usage
				is discouraged since it is addressed on a 8 bytes format. If you use large tables of values, prefer
				float (if the range is ok for that)</p></td>
			<td><p>4.94065645841246544e-324d to 1.79769313486231570e+308d</p></td>
		</tr>
		<tr>
			<th class="center" colspan="3">Other</th>
		</tr>
		<tr>
			<td><strong><code>boolean</code> </strong>
			</td>
			<td><p>the boolean in Java can have two values <code>true</code> or <code>false</code>, which are
				reserved
				keywords of the language </p></td>
			<td><code>true</code> or <code>false</code></td>
		</tr>
		<tr>
			<td><strong><code>char</code> </strong>
			</td>
			<td><p>2 bytes, unsigned, Unicode, <code>char</code> are used to represent characters, but are not
				directly
				compatible with integers or Strings</p></td>
			<td><p>0 to 65,535</p></td>
		</tr>

		</tbody>
	</table>
</div>
<strong>The Object type</strong>

<p>The Object type allows to reference an other object inside your main object, this is a normal object what can
	be built-in or "custom" (meaning your own object).
	Among the noticeable built-in types, there are:
</p>
<ul>
	<li>
		<strong><code>String</code></strong> : this is the way to represent a characters string in Java
	</li>
	<li>
		<strong><code>Integer</code></strong> : this is one of the numerous objects representing a raw type in the
		object style.
		If you want to read more of that, consider reading the Autoboxing paragraph, just below.
	</li>
	<li>
		<strong>Other complex data structures</strong> : read more on the next level about lists, maps, XML
		manipulations etc. <a href="#"> here >></a>
	</li>
</ul>

<h5>Autoboxing</h5>

<p>The Autoboxing mechanism is integrated in Java. It allows to convert an object into a primitive type, as the code
	shows below:</p>
<pre>
	<code class="java">
/**
 * Shows how primitive types can be "boxed" (automatically cast) to Objects
 */
    final char character = 0;
    final byte veryShortInt = 0;
    final short shortInt = 0;
    final int normalInt = 0;
    final long longInt = 0l;

    final float floatingPoint = 0;
    final double bigFloatingPoint = 0;

    final boolean aBooleanExample = true;

    // Object style

    final Byte byteSample = veryShortInt;
    final Short shortSample = shortInt;
    final Integer intSample = normalInt;
    final Long longSample = longInt;

    final Float floatSample = floatingPoint;
    final Double doubleSample = bigFloatingPoint;

    final Boolean booleanSample = aBooleanExample;
	</code>
</pre>
<h5>Using the defined object</h5>

<p>How to use the defined object? We should introduce a new keyword : the well named <code>new</code> operator.
	The new operator allows to create a new instance of the defined class reference.</p>

<p> In order to understand better the object concept in Java, you have to understand that one class is the "template" of
	an object, this is only a definition.
	When you use instances of that class, they all have their own fields values.
</p>

<p>Only things shared by all theses instances are the <code>static</code> fields. Static fields are common to all
	instances, allowing to share data between them.
</p>

<div class="graph">
	<div class="graph-title">An example with an "Identity" object</div>
	<svg xmlns="http://www.w3.org/2000/svg"
	     xmlns:xlink="http://www.w3.org/1999/xlink" height="120pt"
	     style="width:166px;height:120px;" version="1.1"
	     viewBox="0 0 166 120" width="166pt">
		<defs>
			<filter
					height="300%" id="f1" width="300%" x="-1" y="-1">
				<feGaussianBlur result="blurOut" stdDeviation="2.0"/>
				<feColorMatrix
						in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/>
				<feOffset
						dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/>
				<feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/>
			</filter>
		</defs>
		<g>
			<rect
					fill="#FEFECE" filter="url(#f1)" height="103.3438" style="stroke: #A80036; stroke-width: 1.5;"
					width="151" x="6"
					y="8.5"/>
			<ellipse cx="58.25" cy="24.5" fill="#ADD1B2" rx="11" ry="11"
			         style="stroke: #A80036; stroke-width: 1.0;"/>
			<path
					d="M61.0156,20.375 Q61.1719,20.1563 61.3594,20.0469 Q61.5469,19.9375 61.7656,19.9375 Q62.1406,19.9375 62.375,20.1953 Q62.6094,20.4531 62.6094,21.0625 L62.6094,22.5156 Q62.6094,23.125 62.375,23.3906 Q62.1406,23.6563 61.7656,23.6563 Q61.4219,23.6563 61.2188,23.4531 Q61.0156,23.2656 60.9063,22.75 Q60.8594,22.3906 60.6719,22.2031 Q60.3438,21.8281 59.7344,21.6094 Q59.125,21.3906 58.5,21.3906 Q57.7344,21.3906 57.1016,21.7188 Q56.4688,22.0469 55.9766,22.7969 Q55.4844,23.5469 55.4844,24.5781 L55.4844,25.6719 Q55.4844,26.9063 56.375,27.7266 Q57.2656,28.5469 58.8594,28.5469 Q59.7969,28.5469 60.4531,28.2969 Q60.8438,28.1406 61.2656,27.7031 Q61.5313,27.4375 61.6797,27.3594 Q61.8281,27.2813 62.0313,27.2813 Q62.3594,27.2813 62.6172,27.5391 Q62.875,27.7969 62.875,28.1406 Q62.875,28.4844 62.5313,28.8906 Q62.0313,29.4688 61.2344,29.7969 Q60.1563,30.25 58.8594,30.25 Q57.3438,30.25 56.1406,29.625 Q55.1563,29.125 54.4688,28.0547 Q53.7813,26.9844 53.7813,25.7031 L53.7813,24.5469 Q53.7813,23.2188 54.3984,22.0703 Q55.0156,20.9219 56.1094,20.3047 Q57.2031,19.6875 58.4375,19.6875 Q59.1719,19.6875 59.8203,19.8516 Q60.4688,20.0156 61.0156,20.375 Z "/>
			<text
					fill="#000000" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="78.75"
					y="28.9531">Identity
			</text>
			<line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="156" y1="40.5"
			      y2="40.5"/>
			<text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs"
			      textLength="92" x="12" y="55.5">String displayName
			</text>
			<text
					fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="12"
					y="69.3359">String uid
			</text>
			<text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55"
			      x="12" y="83.1719">String email
			</text>
			<text fill="#000000" font-size="11"
			      lengthAdjust="spacingAndGlyphs"
			      textLength="139" x="12"
			      y="97.0078">Map&lt;String,String&gt; attributes
			</text>
			<line
					style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="156" y1="103.8438" y2="103.8438"/>
		</g>
	</svg>
	<div>
		<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="312pt"
		     style="width:569px;height:312px;" version="1.1" viewBox="0 0 569 312" width="569pt">
			<defs>
				<filter height="300%" id="f1" width="300%" x="-1" y="-1">
					<feGaussianBlur result="blurOut" stdDeviation="2.0"/>
					<feColorMatrix in="blurOut" result="blurOut2" type="matrix"
					               values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/>
					<feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/>
					<feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/>
				</filter>
			</defs>
			<g>
				<rect fill="#FFFFFF" filter="url(#f1)" height="85" style="stroke: #000000; stroke-width: 2.0;"
				      width="102" x="140" y="24"/>
				<text fill="#000000" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68"
				      x="157" y="40">Definition
				</text>
				<rect fill="#FFFFFF" filter="url(#f1)" height="85" style="stroke: #000000; stroke-width: 2.0;"
				      width="338" x="22" y="220"/>
				<text fill="#000000" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68"
				      x="157" y="236">Instances
				</text>
				<ellipse cx="190.8198" cy="76.9517" fill="#FEFECE" filter="url(#f1)" rx="34.8198" ry="15.4517"
				         style="stroke: #A80036; stroke-width: 1.5;"/>
				<text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="45" x="168.3198"
				      y="82.2564">Identity
				</text>
				<ellipse cx="305.1053" cy="272.9517" fill="#FEFECE" filter="url(#f1)" rx="38.3553" ry="15.4517"
				         style="stroke: #A80036; stroke-width: 1.5;"/>
				<text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="50" x="280.1053"
				      y="278.2564">Quentin
				</text>
				<ellipse cx="190.7696" cy="272.9517" fill="#FEFECE" filter="url(#f1)" rx="39.7696" ry="15.4517"
				         style="stroke: #A80036; stroke-width: 1.5;"/>
				<text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="52" x="164.7696"
				      y="278.2564">Clément
				</text>
				<ellipse cx="77.0624" cy="272.9517" fill="#FEFECE" filter="url(#f1)" rx="39.0624" ry="15.4517"
				         style="stroke: #A80036; stroke-width: 1.5;"/>
				<text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="51" x="51.5624"
				      y="278.2564">Thomas
				</text>
				<ellipse cx="191.1311" cy="175.0262" fill="#FEFECE" filter="url(#f1)" rx="68.1311" ry="16.0262"
				         style="stroke: #A80036; stroke-width: 1.5;"/>
				<text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="96" x="143.1311"
				      y="180.3309">"new" Operator
				</text>
				<polygon fill="#FBFB77" filter="url(#f1)"
				         points="294,153.5,294,196.2031,560,196.2031,560,163.5,550,153.5,294,153.5"
				         style="stroke: #A80036; stroke-width: 1.0;"/>
				<polygon fill="#FBFB77"
				         points="294,153.5,294,171,259.219,175,294,179,294,196.2031,560,196.2031,560,163.5,550,153.5,294,153.5"
				         style="stroke: #A80036; stroke-width: 1.0;"/>
				<line style="stroke: #A80036; stroke-width: 1.0;" x1="550" x2="550" y1="153.5" y2="163.5"/>
				<line style="stroke: #A80036; stroke-width: 1.0;" x1="560" x2="550" y1="163.5" y2="163.5"/>
				<text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="53" x="300" y="171.5">
					example:
				</text>
				<text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="245" x="300"
				      y="187.8516">Identity Thomas = new Identity("Thomas");
				</text>
				<path d="M191,92.58 C191,108.837 191,135.248 191,153.562 " fill="none"
				      style="stroke: #A80036; stroke-width: 1.0;"/>
				<path d="M216.536,189.867 C227.021,196.057 239.018,203.8 249,212 C264.432,224.6763 279.752,241.4568 290.457,254.048 "
				      fill="none" style="stroke: #A80036; stroke-width: 1.0;"/>
				<polygon fill="#A80036"
				         points="293.904,258.1454,291.1707,248.6834,290.685,254.3194,285.0491,253.8338,293.904,258.1454"
				         style="stroke: #A80036; stroke-width: 1.0;"/>
				<path d="M191,191 C191,207.44 191,233.8899 191,252.065 " fill="none"
				      style="stroke: #A80036; stroke-width: 1.0;"/>
				<polygon fill="#A80036" points="191,257.4197,195,248.4197,191,252.4197,187,248.4197,191,257.4197"
				         style="stroke: #A80036; stroke-width: 1.0;"/>
				<path d="M165.956,189.973 C155.66,196.179 143.862,203.907 134,212 C118.633,224.6105 103.2263,241.1161 92.3122,253.6229 "
				      fill="none" style="stroke: #A80036; stroke-width: 1.0;"/>
				<polygon fill="#A80036"
				         points="88.7896,257.6997,97.7005,253.505,92.0586,253.9164,91.6472,248.2745,88.7896,257.6997"
				         style="stroke: #A80036; stroke-width: 1.0;"/>
			</g>
		</svg>
	</div>
</div>
<p>In the code, you'll have to do the instanciation like the following :</p>
<pre><code class="java">Identity thomas = new Identity("Thomas Broussard", "01", "t.b@sample.com");
Identity quentin = new Identity("Quentin", "02", "q.d@sample.com");
Identity clement = new Identity("Clément", "03", "c.s@sample.com");
</code></pre>

<h6>Use the Java objects</h6>

<p>We saw just before how to create new Java objects, now how to use them ? </p>

<p>To use an object, this object should already have a built-in behaviour to invoke in this object user's code.
	As an example, let's define an object representing a car:</p>

<div class="graph">
	<div class="graph-title">Car definition</div>
	<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="162pt"
	     style="width:190px;height:162px;" version="1.1" viewBox="0 0 190 162" width="190pt">
		<defs>
			<filter height="300%" id="f1" width="300%" x="-1" y="-1">
				<feGaussianBlur result="blurOut" stdDeviation="2.0"/>
				<feColorMatrix in="blurOut" result="blurOut2" type="matrix"
				               values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/>
				<feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/>
				<feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/>
			</filter>
		</defs>
		<g>
			<rect fill="#FEFECE" filter="url(#f1)" height="144.8516" style="stroke: #A80036; stroke-width: 1.5;"
			      width="175" x="6" y="8.5"/>
			<ellipse cx="79.25" cy="24.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/>
			<path d="M82.0156,20.375 Q82.1719,20.1563 82.3594,20.0469 Q82.5469,19.9375 82.7656,19.9375 Q83.1406,19.9375 83.375,20.1953 Q83.6094,20.4531 83.6094,21.0625 L83.6094,22.5156 Q83.6094,23.125 83.375,23.3906 Q83.1406,23.6563 82.7656,23.6563 Q82.4219,23.6563 82.2188,23.4531 Q82.0156,23.2656 81.9063,22.75 Q81.8594,22.3906 81.6719,22.2031 Q81.3438,21.8281 80.7344,21.6094 Q80.125,21.3906 79.5,21.3906 Q78.7344,21.3906 78.1016,21.7188 Q77.4688,22.0469 76.9766,22.7969 Q76.4844,23.5469 76.4844,24.5781 L76.4844,25.6719 Q76.4844,26.9063 77.375,27.7266 Q78.2656,28.5469 79.8594,28.5469 Q80.7969,28.5469 81.4531,28.2969 Q81.8438,28.1406 82.2656,27.7031 Q82.5313,27.4375 82.6797,27.3594 Q82.8281,27.2813 83.0313,27.2813 Q83.3594,27.2813 83.6172,27.5391 Q83.875,27.7969 83.875,28.1406 Q83.875,28.4844 83.5313,28.8906 Q83.0313,29.4688 82.2344,29.7969 Q81.1563,30.25 79.8594,30.25 Q78.3438,30.25 77.1406,29.625 Q76.1563,29.125 75.4688,28.0547 Q74.7813,26.9844 74.7813,25.7031 L74.7813,24.5469 Q74.7813,23.2188 75.3984,22.0703 Q76.0156,20.9219 77.1094,20.3047 Q78.2031,19.6875 79.4375,19.6875 Q80.1719,19.6875 80.8203,19.8516 Q81.4688,20.0156 82.0156,20.375 Z "/>
			<text fill="#000000" font-family="SansSerif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="20"
			      x="99.75" y="28.9531">Car
			</text>
			<line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="180" y1="40.5" y2="40.5"/>
			<rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="49.918"/>
			<text fill="#000000" font-family="SansSerif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59"
			      x="26" y="55.5">String model
			</text>
			<rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="63.7539"/>
			<text fill="#000000" font-family="SansSerif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59"
			      x="26" y="69.3359">String brand
			</text>
			<rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="77.5898"/>
			<text fill="#000000" font-family="SansSerif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108"
			      x="26" y="83.1719">boolean engineStarted
			</text>
			<line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="180" y1="90.0078" y2="90.0078"/>
			<ellipse cx="17" cy="102.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/>
			<text fill="#000000" font-family="SansSerif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149"
			      x="26" y="105.0078">Car(String model, String brand)
			</text>
			<ellipse cx="17" cy="116.2617" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/>
			<text fill="#000000" font-family="SansSerif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53"
			      x="26" y="118.8438">void start()
			</text>
			<ellipse cx="17" cy="130.0977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/>
			<text fill="#000000" font-family="SansSerif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52"
			      x="26" y="132.6797">void stop()
			</text>
			<ellipse cx="17" cy="143.9336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/>
			<text fill="#000000" font-family="SansSerif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76"
			      x="26" y="146.5156">String toString()
			</text>
		</g>
	</svg>
</div>

<div>
	<p>There is the code hereafter :</p>
	<pre>
		<code class="java">package fr.tbr.demo;

/**a car representation*/
public class Car{

    private String model;
    private String brand;

    private boolean engineStarted;


    public Car(String model, String brand) {
		super();
		this.model = model;
		this.brand = brand;
    }

    public void start(){
		this.engineStarted = true;
    }

    public void stop(){
		this.engineStarted = false;
    }

    @Override
    public String toString() {
		return "Car [model=" + model + ", brand=" + brand +
			", engineStarted=" + engineStarted + "]";
    }

}</code>
	</pre>

</div>
<p>Here the object has two behaviours, start() and stop(). Each action has an effect on the car state. In Java, the way
	of
	making a call to these behaviours is :</p>
<pre>
	<code class="java">
Car timeMachine = new Car("DeLorean-DMC12", "DMC");
timeMachine.start();
timeMachine.stop();
	</code>
</pre>

<h6>Objects concepts in Java</h6>
<ul>
	<li><strong>Inheritance</strong>

		<p>The inheritance mechanism is defined via the <code><strong>extends</strong></code> keyword</p>

		<p>To follow the previous example, the way to define an inheritance between a motor-vehicle and a car
			(specialization) is defined by the code after</p>
		<div class="graph">
			<div class="graph-title">Inheritance</div>
			<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="284pt" style="width:190px;height:284px;" version="1.1" viewBox="0 0 190 284" width="190pt"><defs><filter height="300%" id="f1" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><rect fill="#FEFECE" filter="url(#f1)" height="103.3438" style="stroke: #A80036; stroke-width: 1.5;" width="175" x="6" y="172.5"/><ellipse cx="79.25" cy="188.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M82.0156,184.375 Q82.1719,184.1563 82.3594,184.0469 Q82.5469,183.9375 82.7656,183.9375 Q83.1406,183.9375 83.375,184.1953 Q83.6094,184.4531 83.6094,185.0625 L83.6094,186.5156 Q83.6094,187.125 83.375,187.3906 Q83.1406,187.6563 82.7656,187.6563 Q82.4219,187.6563 82.2188,187.4531 Q82.0156,187.2656 81.9063,186.75 Q81.8594,186.3906 81.6719,186.2031 Q81.3438,185.8281 80.7344,185.6094 Q80.125,185.3906 79.5,185.3906 Q78.7344,185.3906 78.1016,185.7188 Q77.4688,186.0469 76.9766,186.7969 Q76.4844,187.5469 76.4844,188.5781 L76.4844,189.6719 Q76.4844,190.9063 77.375,191.7266 Q78.2656,192.5469 79.8594,192.5469 Q80.7969,192.5469 81.4531,192.2969 Q81.8438,192.1406 82.2656,191.7031 Q82.5313,191.4375 82.6797,191.3594 Q82.8281,191.2813 83.0313,191.2813 Q83.3594,191.2813 83.6172,191.5391 Q83.875,191.7969 83.875,192.1406 Q83.875,192.4844 83.5313,192.8906 Q83.0313,193.4688 82.2344,193.7969 Q81.1563,194.25 79.8594,194.25 Q78.3438,194.25 77.1406,193.625 Q76.1563,193.125 75.4688,192.0547 Q74.7813,190.9844 74.7813,189.7031 L74.7813,188.5469 Q74.7813,187.2188 75.3984,186.0703 Q76.0156,184.9219 77.1094,184.3047 Q78.2031,183.6875 79.4375,183.6875 Q80.1719,183.6875 80.8203,183.8516 Q81.4688,184.0156 82.0156,184.375 Z "/><text fill="#000000" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="20" x="99.75" y="192.9531">Car</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="180" y1="204.5" y2="204.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="213.918"/><text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="26" y="219.5">String model</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="227.7539"/><text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="26" y="233.3359">String brand</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="180" y1="240.1719" y2="240.1719"/><ellipse cx="17" cy="252.5898" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="26" y="255.1719">Car(String model, String brand)</text><ellipse cx="17" cy="266.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="26" y="269.0078">String toString()</text><rect fill="#FEFECE" filter="url(#f1)" height="103.3438" style="stroke: #A80036; stroke-width: 1.5;" width="134" x="26.25" y="8.5"/><ellipse cx="55.65" cy="24.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M58.4156,20.375 Q58.5719,20.1563 58.7594,20.0469 Q58.9469,19.9375 59.1656,19.9375 Q59.5406,19.9375 59.775,20.1953 Q60.0094,20.4531 60.0094,21.0625 L60.0094,22.5156 Q60.0094,23.125 59.775,23.3906 Q59.5406,23.6563 59.1656,23.6563 Q58.8219,23.6563 58.6188,23.4531 Q58.4156,23.2656 58.3063,22.75 Q58.2594,22.3906 58.0719,22.2031 Q57.7438,21.8281 57.1344,21.6094 Q56.525,21.3906 55.9,21.3906 Q55.1344,21.3906 54.5016,21.7188 Q53.8688,22.0469 53.3766,22.7969 Q52.8844,23.5469 52.8844,24.5781 L52.8844,25.6719 Q52.8844,26.9063 53.775,27.7266 Q54.6656,28.5469 56.2594,28.5469 Q57.1969,28.5469 57.8531,28.2969 Q58.2438,28.1406 58.6656,27.7031 Q58.9313,27.4375 59.0797,27.3594 Q59.2281,27.2813 59.4313,27.2813 Q59.7594,27.2813 60.0172,27.5391 Q60.275,27.7969 60.275,28.1406 Q60.275,28.4844 59.9313,28.8906 Q59.4313,29.4688 58.6344,29.7969 Q57.5563,30.25 56.2594,30.25 Q54.7438,30.25 53.5406,29.625 Q52.5563,29.125 51.8688,28.0547 Q51.1813,26.9844 51.1813,25.7031 L51.1813,24.5469 Q51.1813,23.2188 51.7984,22.0703 Q52.4156,20.9219 53.5094,20.3047 Q54.6031,19.6875 55.8375,19.6875 Q56.5719,19.6875 57.2203,19.8516 Q57.8688,20.0156 58.4156,20.375 Z "/><text fill="#000000" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="72.85" y="28.9531">MotorVehicle</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="27.25" x2="159.25" y1="40.5" y2="40.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="34.25" y="49.918"/><text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="46.25" y="55.5">String engineType</text><polygon fill="none" points="37.25,61.7539,41.25,65.7539,37.25,69.7539,33.25,65.7539" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="46.25" y="69.3359">boolean engineStarted</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="27.25" x2="159.25" y1="76.1719" y2="76.1719"/><ellipse cx="37.25" cy="88.5898" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="46.25" y="91.1719">void start()</text><ellipse cx="37.25" cy="102.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="46.25" y="105.0078">void stop()</text><path d="M93.25,131.965 C93.25,145.571 93.25,159.561 93.25,172.367 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="86.2501,131.813,93.25,111.813,100.2501,131.813,86.2501,131.813" style="stroke: #A80036; stroke-width: 1.0;"/></g></svg>
		</div>
		<p>And the UML schema</p>
		<pre><code class="java">
package fr.tbr.demo;

/**a car representation*/
public class Car extends MotorVehicle{



    private String model;
    private String brand;




    public Car(String model, String brand) {
	super();
	this.model = model;
	this.brand = brand;
    }



    @Override
    public String toString() {
	String returned = "Car [model=" + model +
			", brand=" + brand + ", engineStarted=" + engineStarted + "]";
	Car timeMachine = new Car("DeLorean-DMC12", "DMC");
	timeMachine.start();
	timeMachine.stop();
	return returned;

    }
}
		</code></pre>
	<p>Notice that you can use the properties of the parent object in the inherited object thanks to the <code><strong>super</strong></code> operator</p>
	</li>
</ul>

<h6>Common operators</h6>

<p>In Java there are a lot of operators, only a little part is daily used. This part presents these operators and how to
	use them in a java program</p>


<ul>
	<li></li>
</ul>
</li>
</ul>

</div>

</div>
<!-- container -->


</div>
<div class="container big-page-footer">
	<footer>
		Thomas Broussard &#169; 2013
	</footer>
</div>

</body>

</html>