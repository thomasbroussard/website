<?xml version="1.0" encoding="utf-8"?>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8"/>
    <title>Java cheat sheets</title>
    <meta content="text/html"/>

    <link rel="shortcut icon" href="../../../../images/favicon.ico"/>
    <!-- Basic Page Needs
  ================================================== -->
    <meta name="description" content="My experience and tips for the Java programming language"/>
    <meta name="author" content="Thomas Broussard"/>

    <!-- Mobile Specific Metas
  ================================================== -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>

    <!-- CSS
  ================================================== -->
    <link rel="stylesheet" href="../../../../stylesheets/base.css"/>
    <link rel="stylesheet" href="../../../../stylesheets/layout.css"/>

    <link rel="stylesheet" type="text/css" href="http://thomas-broussard.fr/stylesheets/github-rainbow.css"/>
    <!-- Scripts
    =============================================== -->


    <!--[if lt IE 9]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <script type="text/javascript" src="../../../../scripts/rainbow/rainbow.js"></script>
    <script type="text/javascript" src="../../../../scripts/tbr/cheatsheet.js"></script>

</head>
<body>
<div class="cheat" lang="en" xmlns="http://www.w3.org/1999/xhtml">
<div class="sheetfilter">
<!--    <label for="filter">Filter</label>-->

    <input class="filterinput" placeholder="Filter (Nothing allows to see all)" onkeyup="filter()" id="filter" type="text"/>

</div>
<div class="sheet" id="java.lang.primitive" data-tags="primitive, types, java">

    <h2>Primitive types <a href="#java.lang.primitive" class="bookmark">bookmark</a> </h2>


			<pre>
			<code class="java">
/**
 * Show how to use primitive types
 */
public void primitiveTypes() {
	// this is an integer, but should not be
	// used as a numerical value
	// chars represent character symbols
	char character = 0;

	// this is a byte, it is unsigned
	byte veryShortInt = 0;

	// this is a short integer, it is signed
	short shortInt = 0;

	// it's a normal range integer, it is signed
	int normalInt = 0;

	//  it's a wide range integer; it is signed,
	//	notice that to be a long, you have to put
	//	a "l" after the number
	long longInt = 022222222222222222l;

	// This is a floating point number
	float floatingPoint = 0;

	// this is a floating point number with a
	// wide range
	double bigFloatingPoint = 0;

	// this is a boolean (can have true or false as
	// a value)
	boolean aBooleanExample;
}</code>
			</pre>
</div>
<div class="sheet">
    <h2>Autoboxing</h2>
			<pre>
			<code class="java">
/**
 * Shows how primitive types can be "boxed" (automatically cast) to Objects
 */
public void autoBoxing() {
	char character = 0;
	byte veryShortInt = 0;
	short shortInt = 0;
	int normalInt = 0;
	long longInt = 0l;

	float floatingPoint = 0;
	double bigFloatingPoint = 0;

	boolean aBooleanExample = true;

	// Object style

	Byte byteSample = veryShortInt;
	Short shortSample = shortInt;
	Integer intSample = normalInt;
	Long longSample = longInt;

	Float floatSample = floatingPoint;
	Double doubleSample = bigFloatingPoint;
	Boolean booleanSample = aBooleanExample;
}
			</code>
			</pre>
</div>
<div class="sheet">
    <h2>Loops</h2>
			<pre>
			<code class="java">
// for-loop
String[] table = new String[10];
for (int i = 0; i &lt; 10; i++) {
	String current = table[i];
	System.out.println(current);
}

// for-loop, "foreach" way
for (String s : table) {
	System.out.println(s);
}

// while
int size = 10;
int i = 0;
while (i &lt; size) {
	System.out.println(table[i]);
	i++;
}
			</code>
			</pre>
</div>
<div class="sheet">
    <h2>Switch</h2>
			<pre>
			<code class="java">
int toBeTested = 2;
// Switches can be based on integer values, chars, or enums. Since java
// 7, it can even be based on Strings
switch (toBeTested) {
case 1:
	// treat case one;
	break; // put this break so the case stops
case 2:
	// in this example, this the case we pass into
	break;

default:
	// this is the instruction to perform if no cases were satisfied
	break;
}

			</code>
			</pre>
</div>

<div class="sheet">
    <h2>Lists</h2>
			<pre>
			<code class="java">
List&lt;String&gt; listSample = new ArrayList&lt;String&gt;();
listSample.add("test.test2.test3");
Integer listSize = listSample.size();

// first the "old school" method

for (int i = 0; i &lt; listSize; i++) {
	String currentString = listSample.get(i);
}

// for each method

for (String current : listSample) {
	// do something with current
	System.out.println("current : " + current);
	String[] strArray = current.split("\\");
	for (String strPart : strArray) {
		System.out.println("part : " + strPart);
	}
}

//
Collections.sort(listSample);
			</code>
			</pre>
</div>
<div class="sheet">
    <h2>Sets</h2>
			<pre>
			<code class="java">
Set&lt;String&gt; setSample = new HashSet&lt;String&gt;();
setSample.add("string1");
setSample.add("string2");
setSample.add("string1");

for (String current : setSample) {
	System.out.println("current : " + current);
}

List&lt;String&gt; converted = new ArrayList&lt;String&gt;(setSample);
			</code>
			</pre>
</div>
<div class="sheet">
    <h2>Tests and comparisons</h2>
			<pre>
			<code class="java">
/**
* Comparison Operators are:
* - "=="  equality
*  - ">"   greater than
*  - "&lt;"   lesser than
*  - "&lt;="  lesser than or equal
*  - ">="  greater than or equal
*
* Conditions combinations operators are:
* - "&amp;&amp;" logical AND
* - "||" logical OR
* - "&amp;"  binary AND
* - "|"  binary OR
* - "!"  Negation
*/

// A boolean to do the demo
final boolean tester = true;
final boolean anotherTester = false;

/*
 * The if instruction is followed by a parenthesis block, allowing to
 * put the condition. If the condition is matched, then the curly
 * bracket is executed. Else the "else" block is performed
 */

if (tester) {
    // do something
} else {
    // do something else
}

// -------------------------------------------
// composed test
if (tester &amp;&amp; !anotherTester) {
    // do something
} else {
    // do something else
}

// --------------------------------------------
// you can combine several if else instructions

if (tester &amp;&amp; anotherTester) {
    // do something
} else if (!anotherTester) {
    // do anotherThing
} else {
    // do a third thing
}

// --------------------------------------------
// Ternary way

final String result = tester &amp;&amp; anotherTester ? "true" : "false";
			</code>
			</pre>
</div>
<div class="sheet">
    <h2>File manipulations</h2>
			<pre>
			<code class="java">
/**
* This is a sample log class
*/
public void manipulateFile(String path) {
	try {
	    final File pathDir = new File(path);
	//The exists() method return true if the file is found
	    if (!pathDir.exists()) {
			//the mkdirs() method creates the missing directories
			pathDir.mkdirs();
	    }
	//The file object takes the path as a String parameter
	//Notice the File.separator constant: it is used to
	// call the built-in path separator of the system
	    final File file = new File(path + File.separator
				+ outputFileSdf.format(new Date())
				+ ".txt");
	    if (!file.exists()) {
			file.createNewFile();
	    }

	//The FileWriter is a writer allowing to write to a file
	    final FileWriter writer = new FileWriter(file);
	//If you want to have more useful methods like
	// "newLine()", you have to use the BufferedWriter class
	    this.fileWriter = new BufferedWriter(writer);
		this.fileWriter.write(builder.toString());
	    this.fileWriter.newLine();

	//the flush method allows to write concretely in the file
	    this.fileWriter.flush();

	} catch (final IOException e) {
	    e.printStackTrace();
	}
}
			</code>
			</pre>
</div>
<div class="sheet">
    <h2>Maps</h2>

    <p>The Map Interface allows the Java developer to associate a key to a value inside a data structure </p>

    <p>The Map is parametrized for the key and the value types. It allows to add a safety in the data access </p>
			<pre>
			<code class="java">
/**
* the map is usually used in the storage of a properties set
*/
final Map&lt;String, String&gt; mapSample = new HashMap&lt;String, String&gt;();
mapSample.put("sampleKey", "sampleValue");
mapSample.put("theConfigurationPath", "C:/test");

mapSample.put("Family name", "Broussard");

final Integer mapSize = mapSample.size();

for (final Entry&lt;String, String&gt; entry : mapSample.entrySet()) {
    System.out.println("this key : " + entry.getKey() +
				" is associated with this value :" +
				entry.getValue());
}

final String value = mapSample.get("Family name");
System.out.println(value);
			</code>
			</pre>
</div>
<div class="sheet">
    <h2>XML Manipulation : parsing an XML File</h2>
			<pre>
			<code class="java">
/**
 * Creates a "document" from an XML File, the document is the object
 * representing the xml file, allowing to query it in order to get the
 * contained data
 *
 * @param file the location of the xml file
 * @return document, an xml document
 */
private Document getDocument(File file) {
  // It's generally painful to manipulate XML in java,
  // because Apis are quite heavy
  //First, get a document builder factory
  final DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
  Document doc = null;

  //Then get a document builder from the file
  try {
      final DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
      log.info("working on this file :" + file.getAbsolutePath());
      //In the end, ask the document builder to parse the inputfile
      doc = dBuilder.parse(inputFile);

  } catch (SAXException | IOException | ParserConfigurationException e) {
      e.printStackTrace();
      return null;
  }
  return doc;
}
			</code>
			</pre>
    <div class="graph">
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="290pt"
             style="width:478px;height:290px;" version="1.1" viewBox="0 0 478 290" width="478pt">
            <defs>
                <filter height="300%" id="f1" width="300%" x="-1" y="-1">
                    <feGaussianBlur result="blurOut" stdDeviation="2.0"/>
                    <feColorMatrix in="blurOut" result="blurOut2" type="matrix"
                                   values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/>
                    <feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/>
                    <feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/>
                </filter>
            </defs>
            <g>
                <ellipse cx="98.316" cy="28.9132" fill="#FEFECE" filter="url(#f1)" rx="92.566" ry="20.9132"
                         style="stroke: #A80036; stroke-width: 1.5;"/>
                <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="156" x="20.316"
                      y="34.2179">DocumentBuilderFactory
                </text>
                <ellipse cx="98.4211" cy="141.9342" fill="#FEFECE" filter="url(#f1)" rx="72.6711" ry="16.9342"
                         style="stroke: #A80036; stroke-width: 1.5;"/>
                <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="108" x="44.4211"
                      y="147.2389">DocumentBuilder
                </text>
                <polygon fill="#FBFB77" filter="url(#f1)"
                         points="240.75,112.5,240.75,171.5547,469.75,171.5547,469.75,122.5,459.75,112.5,240.75,112.5"
                         style="stroke: #A80036; stroke-width: 1.0;"/>
                <polygon fill="#FBFB77"
                         points="240.75,112.5,240.75,138,170.281,142,240.75,146,240.75,171.5547,469.75,171.5547,469.75,122.5,459.75,112.5,240.75,112.5"
                         style="stroke: #A80036; stroke-width: 1.0;"/>
                <line style="stroke: #A80036; stroke-width: 1.0;" x1="459.75" x2="459.75" y1="112.5" y2="122.5"/>
                <line style="stroke: #A80036; stroke-width: 1.0;" x1="469.75" x2="459.75" y1="122.5" y2="122.5"/>
                <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="160" x="246.75"
                      y="130.5">The document builder takes
                </text>
                <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="208" x="246.75"
                      y="146.8516">the file as an argument for the parse
                </text>
                <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="246.75"
                      y="163.2031">method
                </text>
                <ellipse cx="98.0048" cy="267.9517" fill="#FEFECE" filter="url(#f1)" rx="48.2548" ry="15.4517"
                         style="stroke: #A80036; stroke-width: 1.5;"/>
                <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="64" x="66.0048"
                      y="273.2564">Document
                </text>
                <path d="M98,50.101 C98,69.715 98,99.452 98,119.523 " fill="none"
                      style="stroke: #A80036; stroke-width: 1.0;"/>
                <path d="M98,159.211 C98,181.793 98,222.6849 98,247.0911 " fill="none"
                      style="stroke: #A80036; stroke-width: 1.0;"/>
                <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="99" y="216.5">
                    Parses the file
                </text>
            </g>
        </svg>
    </div>
</div>
<div class="sheet">
<h2>XML Manipulations : Getting data</h2>
	  <pre>
		  <code class="java">
/**
 * gets the list of Identities matching the given criteria
 * @param the criteria the returned identities must match
 * @return a list of Identity
 */
public List&lt;Identity> serialize(SerializationCriteria criteria) {
  log.info("entering the serialize() method");
  // get the document
  Document doc = getDocument(this.inputFile);
  final List&lt;Identity> idList = new ArrayList&lt;Identity>();
  if (doc != null) {
      return null;
  }
  //getDocumentElement(); will get the main XML node (root)
  //the root element is "identities" see the xml file below
  final Element root = doc.getDocumentElement();

  /* generic way of doing */
  final NodeList nodeList = root.getChildNodes();
  if (nodeList == null) {
      return null;
  }

  /* better way  when you know what is inside*/
  final NodeList identityTagList = root.getElementsByTagName("identity");
  if (identityTagList == null) {
      return null;
  }

  final int identityListSize = identityTagList.getLength();
  for (int i = 0; i &lt; identityListSize; i++) {
      idList.add(XmlImport.getIdentityFromXml((Element) identityTagList.item(i)));
  }
  log.info("exiting the serializer");
  return idList;
}
		  </code>
	  </pre>
	  <pre>
		  <code class="java">
/**
 * Transforms an XML element into an Identity POJO
 * @param el the element assumed to be an Identity
 * @return an identity object
 */
public static Identity getIdentityFromXml(final Element el) {
  //get the sub elements list
  final NodeList nl = el.getChildNodes();
  if (nl == null) {
      return null;
  }
  final Identity id = new Identity();
  final int size = nl.getLength();
  for (int i = 0; i &lt; size; i++) {
      final Node attr = nl.item(i);
      if (attr instanceof Element) { //test the instance of operator

  	switch (attr.getNodeName()) {
  	case "displayedName":
  	    //associate each known node to its corresponding value
  	    //in the identity object
  	    id.setDisplayedName(attr.getTextContent());
  	    break;
  	/*
  	 * case "": break;
  	 */
  	}
      }
  }
  return id;
}
		  </code>
	  </pre>
<p>The corresponding xml file: </p>
	<pre>
<code class="xml">
<identities xmlns="">
    <identity>
        <uniqueId>1</uniqueId>
        <displayedName>Thomas Broussard</displayedName>
        <email>thomas.broussard@gmail.com</email>
        <attribute name="phone">+33123456789</attribute>
    </identity>
    <identity>
        <uniqueId>2</uniqueId>
        <displayedName>David Mahery</displayedName>
        <email>david.mah@gmail.com</email>
        <attribute name="phone">+33123456781</attribute>
    </identity>
</identities>
		</code>
	</pre>

<div class="graph">
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="563pt"
         style="width:565px;height:563px;" version="1.1" viewBox="0 0 565 563" width="565pt">
        <defs>
            <filter height="300%" id="f1" width="300%" x="-1" y="-1">
                <feGaussianBlur result="blurOut" stdDeviation="2.0"/>
                <feColorMatrix in="blurOut" result="blurOut2" type="matrix"
                               values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/>
                <feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/>
                <feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/>
            </filter>
        </defs>
        <g>
            <rect fill="#FFFFFF" filter="url(#f1)" height="172" style="stroke: #000000; stroke-width: 2.0;"
                  width="270" x="22" y="198"/>
            <text fill="#000000" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="61"
                  x="126.5" y="214">DomAPIs
            </text>
            <ellipse cx="157.1715" cy="251.2343" fill="#FEFECE" filter="url(#f1)" rx="66.6715" ry="15.7343"
                     style="stroke: #A80036; stroke-width: 1.5;"/>
            <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="92" x="111.1715"
                  y="256.539">getChildNodes
            </text>
            <ellipse cx="157.2025" cy="328.1405" fill="#FEFECE" filter="url(#f1)" rx="118.7025" ry="26.1405"
                     style="stroke: #A80036; stroke-width: 1.5;"/>
            <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="214" x="50.2025"
                  y="333.4452">getElementsByTagName "identity"
            </text>
            <polygon fill="#FBFB77" filter="url(#f1)"
                     points="352,7.5,352,66.5547,540,66.5547,540,17.5,530,7.5,352,7.5"
                     style="stroke: #A80036; stroke-width: 1.0;"/>
            <line style="stroke: #A80036; stroke-width: 1.0;" x1="530" x2="530" y1="7.5" y2="17.5"/>
            <line style="stroke: #A80036; stroke-width: 1.0;" x1="540" x2="530" y1="17.5" y2="17.5"/>
            <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="139" x="358" y="25.5">
                the getChildNodes() API
            </text>
            <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="167" x="358"
                  y="41.8516">gets all the nodes regardless
            </text>
            <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="97" x="358" y="58.2031">
                of their tag name
            </text>
            <polygon fill="#FBFB77" filter="url(#f1)"
                     points="336,299.5,336,358.5547,556,358.5547,556,309.5,546,299.5,336,299.5"
                     style="stroke: #A80036; stroke-width: 1.0;"/>
            <polygon fill="#FBFB77"
                     points="336,299.5,336,324.602,275.562,328.41,336,332.602,336,358.5547,556,358.5547,556,309.5,546,299.5,336,299.5"
                     style="stroke: #A80036; stroke-width: 1.0;"/>
            <line style="stroke: #A80036; stroke-width: 1.0;" x1="546" x2="546" y1="299.5" y2="309.5"/>
            <line style="stroke: #A80036; stroke-width: 1.0;" x1="556" x2="546" y1="309.5" y2="309.5"/>
            <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="199" x="342" y="317.5">
                the getElementsByTagName() API
            </text>
            <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="185" x="342"
                  y="333.8516">gets all the nodes with the given
            </text>
            <text fill="#000000" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="145" x="342"
                  y="350.2031">tag name as a parameter
            </text>
            <ellipse cx="445.8198" cy="116.9517" fill="#FEFECE" filter="url(#f1)" rx="34.8198" ry="15.4517"
                     style="stroke: #A80036; stroke-width: 1.5;"/>
            <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="45" x="423.3198"
                  y="122.2564">Node 1
            </text>
            <ellipse cx="445.8198" cy="182.9517" fill="#FEFECE" filter="url(#f1)" rx="34.8198" ry="15.4517"
                     style="stroke: #A80036; stroke-width: 1.5;"/>
            <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="45" x="423.3198"
                  y="188.2564">Node 2
            </text>
            <ellipse cx="445.8198" cy="248.9517" fill="#FEFECE" filter="url(#f1)" rx="34.8198" ry="15.4517"
                     style="stroke: #A80036; stroke-width: 1.5;"/>
            <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="45" x="423.3198"
                  y="254.2564">Node n
            </text>
            <ellipse cx="445.8051" cy="408.9517" fill="#FEFECE" filter="url(#f1)" rx="43.3051" ry="15.4517"
                     style="stroke: #A80036; stroke-width: 1.5;"/>
            <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="57" x="417.3051"
                  y="414.2564">identity 1
            </text>
            <ellipse cx="445.8051" cy="474.9517" fill="#FEFECE" filter="url(#f1)" rx="43.3051" ry="15.4517"
                     style="stroke: #A80036; stroke-width: 1.5;"/>
            <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="57" x="417.3051"
                  y="480.2564">identity 2
            </text>
            <ellipse cx="445.8051" cy="540.9517" fill="#FEFECE" filter="url(#f1)" rx="43.3051" ry="15.4517"
                     style="stroke: #A80036; stroke-width: 1.5;"/>
            <text fill="#000000" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="57" x="417.3051"
                  y="546.2564">identity n
            </text>
            <path d="M170.882,235.771 C198.414,203.991 266.189,129.77 336,84 C344.442,78.465 353.644,73.328 363.007,68.638 "
                  fill="none" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/>
            <path d="M179.662,236.598 C212.386,215.338 276.893,175.343 336,150 C359.889,139.757 387.987,131.332 409.671,125.559 "
                  fill="none" style="stroke: #A80036; stroke-width: 1.0;"/>
            <path d="M203.793,240.15 C261.132,226.565 358.106,203.588 409.907,191.315 " fill="none"
                  style="stroke: #A80036; stroke-width: 1.0;"/>
            <path d="M223.484,250.544 C279.558,250.153 358.466,249.603 405.403,249.276 " fill="none"
                  style="stroke: #A80036; stroke-width: 1.0;"/>
            <path d="M230.422,348.44 C286.386,364.234 361.644,385.474 406.55,398.148 " fill="none"
                  style="stroke: #A80036; stroke-width: 1.0;"/>
            <path d="M190.854,352.994 C225.42,378.318 282.174,417.196 336,442 C357.778,452.035 383.384,459.9686 404.304,465.5392 "
                  fill="none" style="stroke: #A80036; stroke-width: 1.0;"/>
            <path d="M176.606,353.753 C206.094,392.744 267.308,466.5918 336,508 C356.066,520.0959 380.91,528.0645 401.81,533.1349 "
                  fill="none" style="stroke: #A80036; stroke-width: 1.0;"/>
        </g>
    </svg>
</div>
</div>

</div>
<!-- container -->


</body>

</html>