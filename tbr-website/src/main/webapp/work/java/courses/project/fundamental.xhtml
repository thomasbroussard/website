<html xmlns="http://www.w3.org/1999/xhtml">

<head>


    <!-- Basic Page Needs
  ================================================== -->
    <meta charset="utf-8"/>
    <title>(Not) Just Java</title>
    <meta name="description" content=""/>
    <meta name="author" content="Thomas Broussard"/>

    <!-- Mobile Specific Metas
  ================================================== -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>


    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <meta name="description" content=""/>
    <meta name="author" content=""/>
    <link rel="shortcut icon" href="../../../../images/favicon.ico"/>
    <link href="../../../../stylesheets/doc-bs.css" rel="stylesheet"/>
    <link href="../../../../stylesheets/custom.css" rel="stylesheet"/>
    <title>(Not) Just Java</title>

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"/>

    <!-- Optional theme -->
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css"/>


    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->


</head>
<body>
<!-- Main jumbotron for a primary marketing message or call to action -->
<!-- Docs page layout -->
<div class="bs-docs-header" id="content">
    <div class="container">
        <h1>Java Fundamental : Project</h1>

        <p>Description of the fundamental period project</p>

    </div>

</div>

<div class="container bs-docs-container">

<div class="row">
<div class="col-md-3">
    <div class="bs-docs-sidebar hidden-print" role="complementary">
        <ul class="nav bs-docs-sidenav">

            <li>
                <a href="#int">Introduction</a>
            </li>
            <li>
                <a href="#first">Identity Management</a>
            </li>
            <li>
                <a href="#documentation">Documentation Normalization</a>
            </li>
            <li>
                <a href="#pt1sum">Summary</a>
            </li>
            <li>
                <a href="#second">Extending Identities</a>
            </li>
        </ul>
        <a class="back-to-top" href="#content">
            Back to top
        </a>
    </div>


</div>
<div class="col-md-9" role="main">
<ol class="breadcrumb">
    <li><a href="../../../../index.xhtml">Home</a></li>
    <li><a href="../../../index.xhtml">Work</a></li>
    <li><a href="../../index.xhtml">Java</a></li>
    <li><a href="../index.xhtml">Courses</a></li>
    <li class="active">Project - Fundamental Period</li>
</ol>
<div class="bs-docs-section counter">
<h1 id="main">IAM Project - Fundamental Java Students</h1>

<p class="lead">The first step in the IAM application : the IAM Core</p>


<h1 class="page-header" id="int">Introduction</h1>

<p>The goal of this project is to make you discover how to program in Java.</p>

<p>This project has a good covering in the nowadays Java language usage, you will learn basic
    things, like creating
    and using the Java Developer Kit APIs, but also to persist data in databases, or executing an
    application on a
    Java application Server.</p>

<p>The subject of Identity Management has been chosen because it will put trainees in the Business
    application
    world, which is what they will probably do in the next years</p>

<h4>The Identity Management software</h4>

<p> This Identity Management software is quite basic. The main goal is to manage users of an
    Information System.
    As many basic concepts, it can be much improved, especially when you want to bring security to
    this management.
    The application will be able to :
</p>
<ul class="circle">
    <li>Access, create and modify user information</li>
    <li>Persist users data in a database (or in an XML File)</li>
    <li>Be robust, capable of good performance</li>
    <li>Propose a simple but efficient user interface (optional)</li>
</ul>

<h1 class="page-header" id="first">First Step: manage Identities</h1>

<h3 class="title">Identity information management</h3>

<p>First of all, let's focus on the Identity Management. This feature should include </p>
<ul class="circle">
    <li>Means to read and store information about identities. This feature can be achieved in
        several ways (these means are listed from the simplest to the hardest).
        <ul class="square">
            <li>
                The minimal thing is to provide a set of API to act on identities data
            </li>
            <li>
                You also can do it through a SWT application thanks the GUI builder in Eclipse
                see : <a href="http://www.eclipse.org/windowbuilder/"> Eclipse gui builder </a>
            </li>
            <li>
                If you are used to using servlets, JSP and more generally web interface, you can do
                a little java web application.
            </li>
        </ul>

        Data can be persisted by reading/writing data from/in a raw file, an xml file or a
        database using a JDBC connector.
    </li>
</ul>
<p>As an example of an identity definition, you can look at the schema hereafter:</p>

<div class="graph">
    <img src="../../../../images/svg/oop-identity-def.svg"/>

    <div class="graph-title">fig. An identity object</div>
</div>


<p>You can find a global activity diagram below:</p>

<div class="graph">
    <img src="../../../../images/png/oop-activity-diagram.png" />
</div>


<h3 class="title">Authentication management</h3>

<p>You should differentiate <strong>Identities</strong> (what is managed) and <strong>Users</strong> (who does manage).
    Users can
    access to the application thanks to a login and a password. As users are also identities, try to
    optimize your code to avoid code replication</p>

<p>This must be done with regards to the regular security constraints concerning this kind of
    feature</p>

<h3 class="title">Main actions</h3>

<p>Your application should comport a scenario which <strong>authenticates</strong> a user, and makes
    him use the
    Identity management through predefined methods</p>
<ul class="circle">
    <li>
        <strong>Create</strong> an Identity
    </li>
    <li>
        <strong>Update</strong> an Identity
    </li>
    <li>
        <strong>Delete</strong> an Identity

    </li>
</ul>

<p>Once accomplished, this step should have you made use the very basics of the Java language</p>

<h1 class="page-header" id="documentation">Documentation Normalization</h1>

<p>Being able to write a documentation at a standard and with a scientific approach is very appreciated in
    companies </p>

<p>Hereafter should be your table of content</p>
<ol>
    <li><span class="text-info">Subject description</span></li>
    <li><span class="text-info">Subject analysis</span>
        <ol>
            <li>Major features</li>
            <li>Application Feasibility</li>
            <li>Data description</li>
            <li>Expected results</li>
            <li>Algorithms study</li>
            <li>Scope of the application (limits, evolutions)</li>
        </ol>
    </li>
    <li><span class="text-info">Conception</span>
        <ol>
            <li>Chosen algorithm</li>
            <li>Data structures</li>
            <li>Global application flow</li>
            <li>Global schema and major features schema</li>
        </ol>
    </li>
    <li><span class="text-info">Console operations description</span>
        <ol>
            <li>&lt;One section by operation&gt;</li>
        </ol>
    </li>
    <li><span class="text-info">Configuration instructions</span></li>
    <li><span class="text-info">Commented Screenshots</span></li>
    <li><span class="text-info">Bibliography</span></li>
</ol>


<h1 class="page-header" id="pt1sum">
    Content summary of the part 1
</h1>

<p>To give you more indications about what you have to do to achieve this practical assignment, here
    is a summary, including the evaluation percentage of each item</p>

<div class="table-responsive">

    <table class="table table-condensed table-bordered table-hover justify">
        <thead>
        <tr>
            <th>Goal</th>
            <th>Technical content</th>
            <th>Evaluation</th>
        </tr>
        </thead>
        <tbody>
        <tr class="info">
            <th colspan="3" class="center">First level : defining a Java Object and use it in an application</th>
        </tr>
        <tr>
            <td>This is what we should have seen during the first courses: the
                goal is to initiate you to
                the Java ecosystem: manipulate basics of the language as much as discovering java tools such
                as
                Eclipse
            </td>
            <td>To achieve this point you should have:
                <ul class="circle">
                    <li>A Java project in Eclipse, containing what will be your core treatments (you could say
                        your application logic)
                    </li>
                    <li><p>In this Java project, you have to define your own package (remember the good practice)
                        to write your first Java Object: it has to be the Identity object defined in this document,
                        please re-read the specification to find how to implement the Identity.</p>

                        <p> You also should be able to run some tests on this object :</p>
                        <ul>
                            <li>Instantiate an Identity</li>
                            <li>Store information in it</li>
                            <li>Test its method</li>
                        </ul>
                    </li>
                </ul>
            </td>
            <td class="numerical">15</td>
        </tr>
        <tr class="info">
            <th colspan="3" class="center">Second level : Find a way to persist a POJO</th>
        </tr>
        <tr>
            <td>This is the most common problem in computer science, for achieving this part fully, you must be
                able to store a list of Identity in an <strong>XML file</strong> or in a <strong>Data Base</strong>
            </td>
            <td>To achieve this point you should have:
                <ul class="circle">
                    <li>The previous point totally achieved
                    </li>
                    <li>
                        If you chose the database connection, you should be able to connect to the database through a
                        JDBC
                        connection, manipulate the
                        PreparedStatement and the Connection object, to read and record from / to the database
                    </li>
                    <li>
                        If you chose the XML File persistence, you should use at least the DOM API to parse your XML
                        file
                        and read/write from/to the xml file.
                    </li>
                </ul>
            </td>
            <td class="numerical">40</td>
        </tr>
        <tr class="info">
            <th colspan="3" class="center">Level three: Be professional</th>
        </tr>
        <tr>
            <td><p>This point will stand for all the Quality and Documentation in the project, all your classes should
                contain appropriate javadoc and comments (a tool evaluating your code quality will be used)</p>

                <p>You also must provide a technical description of your architecture, this documentation should be in a
                    standard format : odt, pdf, doc, docbook, dita, epub. This document is called <strong>Technical
                        Specification</strong></p>

                <p>You should provide a user guide on how to use the "public" part of your program. The public part of
                    your
                    program can either be a GUI or a set of APIs depending if you achieved to make a working GUI. This
                    document is called the <strong>User guide</strong>. This user guide should be readable by someone
                    who
                    doesn't know about your program internal architecture.</p>


            </td>
            <td>To achieve this point you should have:
                <ul class="circle">
                    <li>A document indicating what your program is doing and how it is wired inside (what kind of APIs).
                        Do
                        not hesitate to provide schemas in this documentation, this is the Technical Specification
                        document

                    </li>
                    <li>A document indicating how your program should be used, this is the User Guide
                    </li>
                    <li>You must export your javadoc in a jar called <code>javadoc.jar</code>, and put it in your
                        project in
                        a folder named "javadoc"
                    </li>
                    <li>
                        The preceding requirement implies that you comment well your code, and especially the javadoc.
                    </li>
                </ul>
            </td>
            <td class="numerical">35</td>
        </tr>
        <tr>
            <td>Attendance</td>
            <td></td>
            <td class="numerical">10</td>
        </tr>
        <tr class="info">
            <td colspan="2">Total</td>
            <td class="numerical"><strong>100</strong></td>
        </tr>
        <tr class="info">
            <th colspan="3" class="center">Bonus points</th>
        </tr>
        <tr>
            <td><strong>Make everything configurable:</strong>
                This configuration will avoid hardcoded parameter like connection strings or file path. This is always
                bad
                in any application
            </td>
            <td>To achieve this point you should have:
                <ul class="circle">
                    <li>A global configuration class, which can read a configuration property set from a file on the
                        filesystem (so the path to this file is hardcoded or given as an application parameter)
                    </li>
                    <li>
                        Your configuration must be based on a standard format like <code>properties</code> or
                        <code>XML</code>
                    </li>
                    <li>
                        Try to list everything variable in your application and parameter it inside your configuration
                        file
                    </li>
                </ul>
            </td>
            <td class="numerical">10</td>
        </tr>
        <tr>
            <td>Do a GUI allowing to use your Identity APIs as well as your serializers/deserializers.
            </td>
            <td>To achieve this point you should have:
                <ul class="circle">
                    <li>A GUI that can run as a desktop application, or a web server (prefer the web server)
                    </li>
                    <li>
                        This point should be made <strong>after</strong> you did the other elements listed above.
                        I will not take it in account for the evaluation if you have not already made what is really
                        required before.
                    </li>
                </ul>
            </td>
            <td class="numerical">20</td>
        </tr>
        </tbody>
    </table>

</div>

<h1 class="page-header" id="second">To the second step: Extending Identity</h1>

<p>Our Identities are rather poor. Indeed, to be closer to a real use, we should add a possibility
    to extend the Identity definition</p>

<p>You should add to the identity fields a data structure allowing to store attributes and their
    values dynamically </p>

<p>In addition to that, you will construct an address definition according to <a
        href="http://en.wikipedia.org/wiki/Address_(geography)">this
    spec</a>, and add it to the Identity fields. As an Identity can have several addresses, choose
    the appropriated data structure to hold these addresses
</p>
</div>
</div>

</div>


</div>


<!-- container -->
<iframe src="../../../../common/footer.xhtml">
</iframe>
<!-- Latest compiled and minified JavaScript -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
<script src="http://thomas-broussard.fr/scripts/bootstrap/doc/docs.min.js"></script>
</body>


</html>