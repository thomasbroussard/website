<html xmlns="http://www.w3.org/1999/xhtml">

<head>


    <!-- Basic Page Needs
  ================================================== -->
    <meta charset="utf-8"/>
    <title>(Not) Just Java</title>
    <meta name="description" content="Tutorial"/>
    <meta name="author" content="Thomas Broussard"/>

    <!-- Mobile Specific Metas
  ================================================== -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>

    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="shortcut icon" href="../../../../images/favicon.ico"/>
    <link href="../../../../stylesheets/doc-bs.css" rel="stylesheet"/>
    <link href="../../../../stylesheets/custom.css" rel="stylesheet"/>

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"/>

    <!-- Optional theme -->
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css"/>
    <link rel="stylesheet" type="text/css" href="../../../../stylesheets/github-rainbow.css"/>

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->


</head>
<body>
<!-- Main jumbotron for a primary marketing message or call to action -->
<!-- Docs page layout -->
<div class="bs-docs-header" id="content">
    <div class="container">
        <h1>Java Tutorials - First Java Program</h1>

        <p>How to design, develop and execute a program in Java</p>

    </div>

</div>

<div class="container bs-docs-container">

<div class="row">
<div class="col-md-3">
    <div class="bs-docs-sidebar hidden-print" role="complementary">
        <ul class="nav bs-docs-sidenav">
            <li><a href="#intro">Introduction</a></li>
            <li><a href="#exercise">Exercise description</a></li>
            <li><a href="#step1">Model the program </a></li>
            <li><a href="#tojava">From model to Java Code</a></li>
            <li><a href="#runjava">Run the Java Code</a></li>
        </ul>
        <a class="back-to-top" href="#content">
            Back to top
        </a>
    </div>


</div>
<div class="col-md-9" role="main">
<ol class="breadcrumb">
    <li><a href="../../../../index.xhtml">Home</a></li>
    <li><a href="../../../index.xhtml">Work</a></li>
    <li><a href="../../index.xhtml">Java</a></li>
    <li><a href="../index.xhtml">Tutorials</a></li>
    <li class="active">Java - First Program</li>
</ol>
<div class="bs-docs-section">

<h1 id="intro" class="page-header">Introduction</h1>

<p>This tutorial aims at showing you how to develop your first java program. The exercise is extracted
    from one of our
    lectures. It gives you a complete example on how to proceed</p>

<h1 id="exercise" class="page-header">Exercise description</h1>

<p><strong>Exercise</strong></p>

<p>Create a Java program to calculate the perimeter and the area of different shapes</p>
<ul>
    <li>A triangle</li>
    <li>A circle</li>
    <li>A square</li>
</ul>

And display those results in the standard output

<h1 id="step1" class="page-header">Find a model</h1>

<p>The exercise subject is pretty vague concerning the model of the program. What we can identify is
    that there are at
    least <strong>3 concepts</strong> :
    the <code>Triangle</code>, <code>Circle</code>, <code>Square</code> concepts. </p>

<p>
    Those concepts seem to have at least <strong> 2 methods</strong>: the <code>calculateArea()</code>
    and <code>calculatePerimeter()</code>

</p>

<div class="bs-callout bs-callout-info">
    <h4 class="title">Note</h4>

    <p>When you have to realize a program, it is recommended to not program before having carefully
        understood what are
        the program features. </p>

    <p>Try to have a reflexion phase (even if is not by writing down your ideas) before to start the
        development </p>
</div>

<h3 class="title">Model</h3>

<p>Considering the description this is how we could, <strong>at first sight</strong>, design the class
    diagram :</p>

<div class="graph">
    <div class="graph-title">Possible class diagram</div>
    <object data="../../../../images/svg/java-bases-shapes1.svg"/>
</div>
<p>Notice that shapes have all specific properties, which are mandatory to calculate the area or the
    perimeter of the
    shape. Sometimes those properties are not specified in the feature description</p>
<h4 class="title">Diagram discussion</h4>

<p>This conception is not optimal, why?</p>
<ul>
    <li><p>Because the shapes could inherit from one generic shape allowing to predefine the behaviour
        of inheriting shapes. This is the concept of <code>Interface</code>, we will see it further
        during this course</p>
    </li>
    <li>
        <p>We can also want to factor the best we can the treatments relative to the calculus for a
            <strong>kind</strong> of shape
            This for instance obvious for the <code>Square</code> shape </p>

        <p>To foresee the evolution of the program, it would be convenient to define a
            <code>Quadrilateral</code>
            generic class, to allow a better re-usability of the general perimeter and area formula</p>

        <p>The fact to consider that a <code>Square</code>
            <strong>is-a</strong><code>Quadrilateral</code>, implies the disappearance of the
            <code>side</code> property (because in a square the height and width are equal, but not
            necessarily in every <code>Quadrilateral</code>)</p>
    </li>
</ul>
<div class="bs-callout bs-callout-info">
    <h4 class="title">Note</h4>

    <p>When you define a diagram, ask yourself several questions which can avoid to make costly mistakes
        :</p>
    <ul>
        <li>Did I list all the properties and methods of the described objects ?</li>
        <li>Does the defined objects will help me to answer easily to the requested feature?</li>
        <li>Does my program will evolve ?</li>
        <li>If the answer is yes, will my conception be favorable to that evolution?</li>

    </ul>

</div>

<h4 class="title">Retained diagram</h4>

<div class="graph">
    <div class="graph-title">
        The retained class diagram
    </div>
    <object data="../../../../images/svg/java-bases-shapes2.svg"/>
</div>

<h1 class="page-header" id="tojava">From Model to Java Code</h1>

<p>Now that we have a model, we are ready to define <strong>Java classes</strong>, how to proceed ?</p>

<h3 class="title">Class definition in Java</h3>
                <pre>
<code class="java">package fr.tbr.exercises.geometry; //always define a significant package

/**
 * Define a Circle class, which has 2 methods for calculating its perimeter and area
 * @author Tom
 *
 */
public class Circle {

	//the way to define a constant : static final
	private static final double PI = 3.14159;

	//this is the radius of the circle
	private double radius;

	/**
	 * compute the area of the circle
	 * @return the area
	 */
	public double getArea(){
		return PI * radius * radius;
	}

	/**
	 * compute the perimeter of the circle
	 * @return the perimeter
	 */
	public double getPerimeter(){
		return 2 * PI * radius;
	}
}</code></pre>
<h4 class="title">Remarks</h4>

<p>This sample class represent the one designed in the class diagram: it has 1 property and 2
    methods</p>

<p>You can also notice that :</p>
<ul>
    <li>The properties (here the <code>radius</code>) are private, while the methods are public: this is
        to enforce the principle of encapsulation
    </li>
    <li>The manipulated numerical data are of type <code class="java">double</code> which is the common
        primitive type for numerical data
    </li>
    <li>I defined a constant named PI, to represent the &#960; constant. There is a dedicated constant
        for that in the java language <code class="java">Math.PI;</code></li>
</ul>
<h3 class="title">Use this class in Java</h3>

<p>In the preceding example, the class is only <strong>defined</strong>, there is no way to use it</p>

<p>To use this class definition, you should be able to <strong>instantiate</strong> it, you must define a <code>constructor</code>
</p>

<div class="bs-callout bs-callout-info">
    <h4 class="title">About the instantiation process</h4>

    <p>The difference between a class and its instances is that a class has no substantial existence, it's just
        a schema of construction.
        Instances though, are the result of the construction.
    </p>

    <p>Constructors are the factory that allows to create instances that enforce the schema</p>

    <div class="graph">
        <img style="height:367px" class="side-by-side"
             src="../../../../images/svg/java-bases-instantiation.svg"/>
        <img style="height:367px;" class="side-by-side"
             src="../../../../images/svg/java-bases-instantiation-example.svg"/>

        <div class="graph-title">In the schema above, the analogy between the instantiation mechanism and a car
            factory
        </div>
    </div>
    <p></p>

    <p><strong>Remember</strong> that a constructor takes <strong>some parameters</strong> which will be used to create
        a particular <strong>instance</strong></p>

</div>
<h4 class="title">Define a constructor</h4>

<p>A constructor is a particular method of the class, it has no return type and its name is the class name. As for the
    other entities composing a class (method or property), you can define an access level.</p>

<p>Like methods, it is possible to pass parameter to initialize the newly created instance</p>
   <pre>
<code class="java">/**
 * The constructor to create a circle with a radius equal to the given parameter
 * @param r the radius of the circle to be created
 */
public Circle(double r){
    this.radius = r;
}
</code></pre>

<p>Notice the <strong><code>this</code></strong> keyword, this keyword indicate that you manipulate the property of the
    <strong>current</strong> instance. </p>

<div class="bs-callout bs-callout-warning">
    <p class="text-warning"><strong>Use the <code>this</code> keyword</strong></p>

    <p>The use of the <strong><code>this</code></strong> keyword is highly recommended since it avoids the confusion
        between method local variables and class properties </p>
</div>


<p>Hereafter, the code, completed with the constructor definition, and improved with the
    <strong><code>this</code></strong> usage</p>
        <pre><code class="java">package fr.tbr.exercises.geometry;

/**
 * Define a Circle class, which has 2 methods for calculating its perimeter and area
 * @author Tom
 *
 */
public class Circle {

	//the way to define a private constant : private static final
	private static final double PI = Math.PI;

	//this is the radius of the circle
	private double radius;

	/**
	 * The constructor to create a circle with a radius equal to the given parameter
	 * @param r the radius of the circle to be created
	 */
	public Circle (double r){
		this.radius = r;
	}

	/**
	 * compute the area of the circle
	 * @return the area
	 */
	public double getArea(){
		return PI * this.radius * this.radius;
	}

	/**
	 * compute the perimeter of the circle
	 * @return the perimeter
	 */
	public double getPerimeter(){
		return 2 * PI * this.radius;
	}
}   </code></pre>

<h4 class="title">Instantiate and use the class</h4>

<p>To be able to use the <code class="java">Circle</code> class, you have to call the constructor. Like hereafter, you
    can call it in
    the part of your program requiring the <code>Circle</code> class</p>
<pre><code class="java">Circle smallCircle = new Circle(20);
Circle bigCircle = new Circle(60);

System.out.println("Small circle perimeter : " + smallCircle.getPerimeter() + ", area : " + smallCircle.getArea());
System.out.println("Big circle perimeter : " + bigCircle.getPerimeter() + ", area : " + bigCircle.getArea());</code></pre>
<h1 class="page-header" id="runjava">Program execution</h1>

<p>To run a program in java, you must provide a <code>main</code> method. The main method defines an entry point in your
    program, that allows the JVM to start a new execution</p>

<p>It is recommended that you put the main method in a dedicated class, so there is no pollution in your functional
    class. That's why we will create a class named <code>Geometry</code></p>

<pre><code class="java">package fr.tbr.exercises.geometry;

public class Geometry {

 public static void main(String[] args) {
   Circle smallCircle = new Circle(20);
   Circle bigCircle = new Circle(60);

   System.out.println("Small circle perimeter : " + smallCircle.getPerimeter() + "...");
   System.out.println("Big circle perimeter : " + bigCircle.getPerimeter() + "...");

  }
}</code> </pre>
<p> generates the output : </p>
<pre><code>Small circle perimeter : 125.66370614359172, area : 1256.6370614359173
Big circle perimeter : 376.99111843077515, area : 11309.733552923255
</code> </pre>

<h1 class="page-header">Resources</h1>
<p>The zip of the project is available here <a href="../resources/geometry.zip">geometry</a></p>
</div>

</div>
<!-- container -->
</div>
</div>


<div id="footer">
    <div class="container text-muted">
        Thomas Broussard &#169; 2014
    </div>
</div>

<!-- Latest compiled and minified JavaScript -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
<script src="http://thomas-broussard.fr/scripts/bootstrap/doc/docs.min.js"></script>
<script src="http://thomas-broussard.fr/scripts/rainbow/rainbow.js"></script>
</body>

</html>